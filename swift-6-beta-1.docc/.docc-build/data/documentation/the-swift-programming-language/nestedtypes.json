{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Enumerations are often created to support a specific class or structure’s functionality.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type,"},{"type":"text","text":" "},{"type":"text","text":"and protocols that are normally used in conjunction with a specific type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"text":"whereby you nest supporting types like enumerations, structures, and protocols","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within the definition of the type they support."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To nest a type within another type,"},{"text":" ","type":"text"},{"type":"text","text":"write its definition within the outer braces of the type it supports."},{"type":"text","text":" "},{"type":"text","text":"Types can be nested to as many levels as are required."}]},{"text":"Nested Types in Action","level":2,"anchor":"Nested-Types-in-Action","type":"heading"},{"inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which models a playing card as used in the game of Blackjack."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"BlackjackCard"},{"text":" structure contains two nested enumeration types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"called "},{"code":"Suit","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Rank"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Blackjack, the Ace cards have a value of either one or eleven."},{"type":"text","text":" "},{"type":"text","text":"This feature is represented by a structure called "},{"type":"codeVoice","code":"Values"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is nested within the "},{"code":"Rank","type":"codeVoice"},{"text":" enumeration:","type":"text"}]},{"code":["struct BlackjackCard {","","    \/\/ nested Suit enumeration","    enum Suit: Character {","        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"","    }","","    \/\/ nested Rank enumeration","    enum Rank: Int {","        case two = 2, three, four, five, six, seven, eight, nine, ten","        case jack, queen, king, ace","        struct Values {","            let first: Int, second: Int?","        }","        var values: Values {","            switch self {","            case .ace:","                return Values(first: 1, second: 11)","            case .jack, .queen, .king:","                return Values(first: 10, second: nil)","            default:","                return Values(first: self.rawValue, second: nil)","            }","        }","    }","","    \/\/ BlackjackCard properties and methods","    let rank: Rank, suit: Suit","    var description: String {","        var output = \"suit is \\(suit.rawValue),\"","        output += \" value is \\(rank.values.first)\"","        if let second = rank.values.second {","            output += \" or \\(second)\"","        }","        return output","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Suit"},{"type":"text","text":" enumeration describes the four common playing card suits,"},{"type":"text","text":" "},{"type":"text","text":"together with a raw "},{"type":"codeVoice","code":"Character"},{"text":" value to represent their symbol.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Rank","type":"codeVoice"},{"type":"text","text":" enumeration describes the thirteen possible playing card ranks,"},{"text":" ","type":"text"},{"type":"text","text":"together with a raw "},{"code":"Int","type":"codeVoice"},{"text":" value to represent their face value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(This raw "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value isn’t used for the Jack, Queen, King, and Ace cards.)"}]},{"inlineContent":[{"text":"As mentioned above, the ","type":"text"},{"type":"codeVoice","code":"Rank"},{"text":" enumeration defines","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a further nested structure of its own, called "},{"type":"codeVoice","code":"Values"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This structure encapsulates the fact that most cards have one value,"},{"type":"text","text":" "},{"text":"but the Ace card has two values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Values","type":"codeVoice"},{"text":" structure defines two properties to represent this:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"first"},{"type":"text","text":", of type "},{"code":"Int","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"second","type":"codeVoice"},{"text":", of type ","type":"text"},{"code":"Int?","type":"codeVoice"},{"type":"text","text":", or “optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"”"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"codeVoice","code":"Rank"},{"type":"text","text":" also defines a computed property, "},{"code":"values","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which returns an instance of the ","type":"text"},{"type":"codeVoice","code":"Values"},{"type":"text","text":" structure."},{"type":"text","text":" "},{"type":"text","text":"This computed property considers the rank of the card"},{"type":"text","text":" "},{"text":"and initializes a new ","type":"text"},{"type":"codeVoice","code":"Values"},{"type":"text","text":" instance with appropriate values based on its rank."},{"text":" ","type":"text"},{"text":"It uses special values for ","type":"text"},{"code":"jack","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"queen"},{"text":", ","type":"text"},{"type":"codeVoice","code":"king"},{"text":", and ","type":"text"},{"code":"ace","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For the numeric cards, it uses the rank’s raw "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"BlackjackCard"},{"text":" structure itself has two properties — ","type":"text"},{"code":"rank","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"suit","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"It also defines a computed property called ","type":"text"},{"type":"codeVoice","code":"description"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which uses the values stored in "},{"code":"rank","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"suit"},{"text":" to build","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a description of the name and value of the card."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property uses optional binding to check whether there’s"},{"text":" ","type":"text"},{"type":"text","text":"a second value to display, and if so,"},{"type":"text","text":" "},{"type":"text","text":"inserts additional description detail for that second value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"BlackjackCard"},{"text":" is a structure with no custom initializers,","type":"text"},{"type":"text","text":" "},{"text":"it has an implicit memberwise initializer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"You can use this initializer to initialize a new constant called "},{"type":"codeVoice","code":"theAceOfSpades"},{"text":":","type":"text"}]},{"code":["let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)","print(\"theAceOfSpades: \\(theAceOfSpades.description)\")","\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Even though ","type":"text"},{"type":"codeVoice","code":"Rank"},{"text":" and ","type":"text"},{"code":"Suit","type":"codeVoice"},{"type":"text","text":" are nested within "},{"code":"BlackjackCard","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"their type can be inferred from context,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the initialization of this instance is able to refer to the enumeration cases"},{"type":"text","text":" "},{"text":"by their case names (","type":"text"},{"type":"codeVoice","code":".ace"},{"text":" and ","type":"text"},{"type":"codeVoice","code":".spades"},{"type":"text","text":") alone."},{"type":"text","text":" "},{"type":"text","text":"In the example above, the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property correctly reports that"},{"text":" ","type":"text"},{"text":"the Ace of Spades has a value of ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"11"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Referring-to-Nested-Types","level":2,"text":"Referring to Nested Types","type":"heading"},{"inlineContent":[{"type":"text","text":"To use a nested type outside of its definition context,"},{"text":" ","type":"text"},{"type":"text","text":"prefix its name with the name of the type it’s nested within:"}],"type":"paragraph"},{"code":["let heartsSymbol = BlackjackCard.Suit.hearts.rawValue","\/\/ heartsSymbol is \"♡\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the example above,"},{"text":" ","type":"text"},{"text":"this enables the names of ","type":"text"},{"type":"codeVoice","code":"Suit"},{"type":"text","text":", "},{"code":"Rank","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Values","type":"codeVoice"},{"text":" to be kept deliberately short,","type":"text"},{"text":" ","type":"text"},{"text":"because their names are naturally qualified by the context in which they’re defined.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Learn more about using "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","name":"Beta Software"}],"kind":"content"}],"kind":"article","metadata":{"title":"Nested Types"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","interfaceLanguage":"swift"},"sections":[],"abstract":[{"text":"Define types inside the scope of another type.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (6.0 beta)","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Memberwise-Initializers-for-Structure-Types":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/initialization#Memberwise-Initializers-for-Structure-Types","title":"Memberwise Initializers for Structure Types"},"https://developer.apple.com/support/beta-software/":{"type":"link","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/support\/beta-software\/","titleInlineContent":[{"text":"Apple’s beta software","type":"text"}],"title":"Apple’s beta software"}}}