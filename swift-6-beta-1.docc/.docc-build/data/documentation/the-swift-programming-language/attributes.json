{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","interfaceLanguage":"swift"},"sections":[],"metadata":{"title":"Attributes"},"abstract":[{"type":"text","text":"Add information to declarations and types."}],"primaryContentSections":[{"content":[{"inlineContent":[{"text":"There are two kinds of attributes in Swift —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"those that apply to declarations and those that apply to types."},{"text":" ","type":"text"},{"type":"text","text":"An attribute provides additional information about the declaration or type."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"discardableResult"},{"text":" attribute on a function declaration indicates that,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"although the function returns a value,"},{"type":"text","text":" "},{"type":"text","text":"the compiler shouldn’t generate a warning if the return value is unused."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You specify an attribute by writing the "},{"code":"@","type":"codeVoice"},{"text":" symbol followed by the attribute’s name","type":"text"},{"text":" ","type":"text"},{"text":"and any arguments that the attribute accepts:","type":"text"}]},{"syntax":"swift","code":["@<#attribute name#>","@<#attribute name#>(<#attribute arguments#>)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Some declaration attributes accept arguments","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that specify more information about the attribute"},{"type":"text","text":" "},{"text":"and how it applies to a particular declaration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These "},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute arguments"}]},{"type":"text","text":" are enclosed in parentheses,"},{"text":" ","type":"text"},{"type":"text","text":"and their format is defined by the attribute they belong to."}]},{"inlineContent":[{"text":"Attached macros and property wrappers also use attribute syntax.","type":"text"},{"type":"text","text":" "},{"text":"For information about how macros expand,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Macro-Expansion-Expression","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For information about property wrappers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Declaration Attributes","level":2,"anchor":"Declaration-Attributes"},{"inlineContent":[{"type":"text","text":"You can apply a declaration attribute to declarations only."}],"type":"paragraph"},{"type":"heading","level":3,"text":"attached","anchor":"attached"},{"type":"paragraph","inlineContent":[{"text":"Apply the ","type":"text"},{"code":"attached","type":"codeVoice"},{"text":" attribute to a macro declaration.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The arguments to this attribute indicate the macro’s role."},{"text":" ","type":"text"},{"type":"text","text":"For a macro that has multiple roles,"},{"type":"text","text":" "},{"type":"text","text":"apply the "},{"type":"codeVoice","code":"attached"},{"text":" macro multiple times, once for each role.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first argument to this attribute"},{"text":" ","type":"text"},{"type":"text","text":"indicates the macros role:"}]},{"items":[{"term":{"inlineContent":[{"text":"Peer macros","type":"text"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Write "},{"type":"codeVoice","code":"peer"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"code":"PeerMacro","type":"codeVoice"},{"type":"text","text":" protocol. These macros produce new declarations in the same scope as the declaration that the macro is attached to. For example, applying a peer macro to a method of a structure can define additional methods and properties on that structure."}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"type":"text","text":"Member macros"}]},"definition":{"content":[{"inlineContent":[{"text":"Write ","type":"text"},{"code":"member","type":"codeVoice"},{"type":"text","text":" as the first argument to this attribute. The type that implements the macro conforms to the "},{"type":"codeVoice","code":"MemberMacro"},{"type":"text","text":" protocol. These macros produce new declarations that are members of the type or extension that the macro is attached to. For example, applying a member macro to a structure declaration can define additional methods and properties on that structure."}],"type":"paragraph"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Write "},{"code":"memberAttribute","type":"codeVoice"},{"type":"text","text":" as the first argument to this attribute. The type that implements the macro conforms to the "},{"code":"MemberAttributeMacro","type":"codeVoice"},{"type":"text","text":" protocol. These macros add attributes to members of the type or extension that the macro is attached to."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"text","text":"Member attribute"}]}},{"term":{"inlineContent":[{"text":"Accessor macros","type":"text"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write "},{"code":"accessor","type":"codeVoice"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"type":"codeVoice","code":"AccessorMacro"},{"text":" protocol. These macros add accessors to the stored property they’re attached to, turning it into a computed property.","type":"text"}]}]}},{"term":{"inlineContent":[{"text":"Extension macros","type":"text"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Write "},{"type":"codeVoice","code":"extension"},{"type":"text","text":" as the first argument to this attribute. The type that implements the macro conforms to the "},{"code":"ExtensionMacro","type":"codeVoice"},{"type":"text","text":" protocol. These macros can add protocol conformance, a "},{"type":"codeVoice","code":"where"},{"text":" clause, and new declarations that are members of the type the macro is attached to. If the macro adds protocol conformances, include the ","type":"text"},{"code":"conformances:","type":"codeVoice"},{"type":"text","text":" argument and specify those protocols. The conformance list contains protocol names, type aliases that refer to conformance list items, or protocol compositions of conformance list items. An extension macro on a nested type expands to an extension at the top level of that file. You can’t write an extension macro on an extension, a type alias, or a type that’s nested inside a function, or use an extension macro to add an extension that has a peer macro."}],"type":"paragraph"}]}}],"type":"termList"},{"inlineContent":[{"type":"text","text":"The peer, member, and accessor macro roles require a "},{"type":"codeVoice","code":"names:"},{"text":" argument,","type":"text"},{"text":" ","type":"text"},{"text":"listing the names of the symbols that the macro generates.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The extension macro role also requires a "},{"type":"codeVoice","code":"names:"},{"type":"text","text":" argument"},{"text":" ","type":"text"},{"text":"if the macro adds declarations inside the extension.","type":"text"},{"text":" ","type":"text"},{"text":"When a macro declaration includes the ","type":"text"},{"code":"names:","type":"codeVoice"},{"type":"text","text":" argument,"},{"type":"text","text":" "},{"text":"the macro implementation must generate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only symbol with names that match that list."},{"text":" ","type":"text"},{"type":"text","text":"That said,"},{"type":"text","text":" "},{"text":"a macro need not generate a symbol for every listed name.","type":"text"},{"type":"text","text":" "},{"text":"The value for that argument is a list of one or more of the following:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"named(<#name#>)"},{"text":" ","type":"text"},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"text":"name","type":"text"}]},{"type":"text","text":" is that fixed symbol name,"},{"type":"text","text":" "},{"type":"text","text":"for a name that’s known in advance."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"overloaded"},{"type":"text","text":" "},{"type":"text","text":"for a name that’s the same as an existing symbol."}]}]},{"content":[{"inlineContent":[{"code":"prefixed(<#prefix#>)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix"}]},{"type":"text","text":" is prepended to the symbol name,"},{"type":"text","text":" "},{"type":"text","text":"for a name that starts with a fixed string."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"suffixed(<#suffix#>)"},{"text":" ","type":"text"},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"suffix"}]},{"text":" is appended to the symbol name,","type":"text"},{"text":" ","type":"text"},{"text":"for a name that ends with a fixed string.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"arbitrary"},{"text":" ","type":"text"},{"type":"text","text":"for a name that can’t be determined until macro expansion."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a special case,"},{"text":" ","type":"text"},{"text":"you can write ","type":"text"},{"type":"codeVoice","code":"prefixed($)"},{"type":"text","text":" "},{"type":"text","text":"for a macro that behaves similar to a property wrapper."}]},{"text":"available","anchor":"available","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to indicate a declaration’s life cycle"},{"type":"text","text":" "},{"text":"relative to certain Swift language versions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or certain platforms and operating system versions."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"available","type":"codeVoice"},{"text":" attribute always appears","type":"text"},{"text":" ","type":"text"},{"text":"with a list of two or more comma-separated attribute arguments.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These arguments begin with one of the following platform or language names:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"iOS"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"iOSApplicationExtension"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"macOS","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macOSApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"macCatalyst","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"macCatalystApplicationExtension","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"watchOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"watchOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"tvOS"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"tvOSApplicationExtension"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"visionOS"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"visionOSApplicationExtension"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"swift"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use an asterisk ("},{"type":"codeVoice","code":"*"},{"type":"text","text":") to indicate the"},{"type":"text","text":" "},{"type":"text","text":"availability of the declaration on all of the platform names listed above."},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"available"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that specifies availability using a Swift version number"},{"type":"text","text":" "},{"text":"can’t use the asterisk.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The remaining arguments can appear in any order"},{"text":" ","type":"text"},{"text":"and specify additional information about the declaration’s life cycle,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including important milestones."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"unavailable","type":"codeVoice"},{"type":"text","text":" argument indicates that the declaration"},{"text":" ","type":"text"},{"text":"isn’t available on the specified platform.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This argument can’t be used when specifying Swift version availability."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"introduced"},{"text":" argument indicates the first version","type":"text"},{"type":"text","text":" "},{"text":"of the specified platform or language in which the declaration was introduced.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["introduced: <#version number#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"version number"}]},{"type":"text","text":" consists of one to three positive integers,"},{"type":"text","text":" "},{"type":"text","text":"separated by periods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"deprecated"},{"type":"text","text":" argument indicates the first version"},{"type":"text","text":" "},{"text":"of the specified platform or language in which the declaration was deprecated.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It has the following form:"}]},{"syntax":"swift","type":"codeListing","code":["deprecated: <#version number#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"version number"}]},{"text":" consists of one to three positive integers,","type":"text"},{"type":"text","text":" "},{"text":"separated by periods.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Omitting the version number indicates that the declaration is currently deprecated,"},{"type":"text","text":" "},{"text":"without giving any information about when the deprecation occurred.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you omit the version number, omit the colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":") as well."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"obsoleted"},{"text":" argument indicates the first version","type":"text"},{"type":"text","text":" "},{"text":"of the specified platform or language in which the declaration was obsoleted.","type":"text"},{"type":"text","text":" "},{"text":"When a declaration is obsoleted,","type":"text"},{"text":" ","type":"text"},{"text":"it’s removed from the specified platform or language and can no longer be used.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["obsoleted: <#version number#>"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"version number","type":"text"}]},{"text":" consists of one to three positive integers, separated by periods.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"message"},{"type":"text","text":" argument provides a textual message that the compiler displays"},{"type":"text","text":" "},{"type":"text","text":"when emitting a warning or error about the use of a deprecated or obsoleted declaration."},{"text":" ","type":"text"},{"text":"It has the following form:","type":"text"}],"type":"paragraph"},{"code":["message: <#message#>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"message","type":"text"}]},{"type":"text","text":" consists of a string literal."}]}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"renamed"},{"text":" argument provides a textual message","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that indicates the new name for a declaration that’s been renamed."},{"type":"text","text":" "},{"type":"text","text":"The compiler displays the new name"},{"text":" ","type":"text"},{"type":"text","text":"when emitting an error about the use of a renamed declaration."},{"type":"text","text":" "},{"text":"It has the following form:","type":"text"}],"type":"paragraph"},{"code":["renamed: <#new name#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"new name"}],"type":"emphasis"},{"type":"text","text":" consists of a string literal."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can apply the ","type":"text"},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"type":"codeVoice","code":"renamed"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unavailable"},{"text":" arguments","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to a type alias declaration, as shown below,"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that the name of a declaration changed"},{"type":"text","text":" "},{"type":"text","text":"between releases of a framework or library."},{"type":"text","text":" "},{"type":"text","text":"This combination results in a compile-time error"},{"type":"text","text":" "},{"text":"that the declaration has been renamed.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ First release","protocol MyProtocol {","    \/\/ protocol definition","}"]},{"type":"codeListing","syntax":"swift","code":["\/\/ Subsequent release renames MyProtocol","protocol MyRenamedProtocol {","    \/\/ protocol definition","}","","@available(*, unavailable, renamed: \"MyRenamedProtocol\")","typealias MyProtocol = MyRenamedProtocol"]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"You can apply multiple ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes on a single declaration"},{"type":"text","text":" "},{"text":"to specify the declaration’s availability on different platforms","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and different versions of Swift."},{"type":"text","text":" "},{"type":"text","text":"The declaration that the "},{"type":"codeVoice","code":"available"},{"text":" attribute applies to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is ignored if the attribute specifies"},{"text":" ","type":"text"},{"type":"text","text":"a platform or language version that doesn’t match the current target."},{"text":" ","type":"text"},{"text":"If you use multiple ","type":"text"},{"code":"available","type":"codeVoice"},{"type":"text","text":" attributes,"},{"type":"text","text":" "},{"text":"the effective availability is the combination of","type":"text"},{"text":" ","type":"text"},{"text":"the platform and Swift availabilities.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If an ","type":"text"},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute only specifies an "},{"type":"codeVoice","code":"introduced"},{"type":"text","text":" argument"},{"text":" ","type":"text"},{"text":"in addition to a platform or language name argument,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use the following shorthand syntax instead:"}]},{"type":"codeListing","syntax":"swift","code":["@available(<#platform name#> <#version number#>, *)","@available(swift <#version number#>)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The shorthand syntax for "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"text":"concisely expresses availability for multiple platforms.","type":"text"},{"text":" ","type":"text"},{"text":"Although the two forms are functionally equivalent,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the shorthand form is preferred whenever possible."}]},{"code":["@available(iOS 10.0, macOS 10.12, *)","class MyClass {","    \/\/ class definition","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"that specifies availability using a Swift version number","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t additionally specify a declaration’s platform availability."},{"type":"text","text":" "},{"text":"Instead, use separate ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes to specify a Swift"},{"type":"text","text":" "},{"type":"text","text":"version availability and one or more platform availabilities."}]},{"type":"codeListing","code":["@available(swift 3.0.2)","@available(macOS 10.12, *)","struct MyStruct {","    \/\/ struct definition","}"],"syntax":"swift"},{"text":"backDeployed","level":3,"anchor":"backDeployed","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a function, method, subscript, or computed property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to include a copy of the symbol’s implementation"},{"type":"text","text":" "},{"text":"in programs that call or access the symbol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You use this attribute to annotate symbols that ship as part of a platform,"},{"text":" ","type":"text"},{"type":"text","text":"like the APIs that are included with an operating system."},{"text":" ","type":"text"},{"type":"text","text":"This attribute marks symbols that can be made available retroactively"},{"text":" ","type":"text"},{"text":"by including a copy of their implementation in programs that access them.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Copying the implementation is also known as "},{"inlineContent":[{"text":"emitting into the client","type":"text"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This attribute takes a ","type":"text"},{"type":"codeVoice","code":"before:"},{"type":"text","text":" argument,"},{"text":" ","type":"text"},{"type":"text","text":"specifying the first version of platforms that provide this symbol."},{"text":" ","type":"text"},{"type":"text","text":"These platform versions have the same meaning"},{"type":"text","text":" "},{"type":"text","text":"as the platform version you specify for the "},{"code":"available","type":"codeVoice"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unlike the "},{"type":"codeVoice","code":"available"},{"text":" attribute,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the list can’t contain an asterisk ("},{"code":"*","type":"codeVoice"},{"type":"text","text":") to refer to all versions."},{"text":" ","type":"text"},{"text":"For example, consider the following code:","type":"text"}]},{"code":["@available(iOS 16, *)","@backDeployed(before: iOS 17)","func someFunction() { \/* ... *\/ }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"text":"the iOS SDK provides ","type":"text"},{"code":"someFunction()","type":"codeVoice"},{"type":"text","text":" starting in iOS 17."},{"text":" ","type":"text"},{"type":"text","text":"In addition,"},{"text":" ","type":"text"},{"type":"text","text":"the SDK makes "},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":" available on iOS 16 using back deployment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When compiling code that calls this function,"},{"type":"text","text":" "},{"type":"text","text":"Swift inserts a layer of indirection that finds the function’s implementation."},{"text":" ","type":"text"},{"type":"text","text":"If the code is run using a version of the SDK that includes this function,"},{"type":"text","text":" "},{"text":"the SDK’s implementation is used.","type":"text"},{"type":"text","text":" "},{"text":"Otherwise, the copy included in the caller is used.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"calling ","type":"text"},{"code":"someFunction()","type":"codeVoice"},{"text":" uses the implementation from the SDK","type":"text"},{"type":"text","text":" "},{"text":"when running on iOS 17 or later,","type":"text"},{"text":" ","type":"text"},{"text":"and when running on iOS 16","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it uses the copy of "},{"code":"someFunction()","type":"codeVoice"},{"text":" that’s included in the caller.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When the caller’s minimum deployment target"},{"text":" ","type":"text"},{"type":"text","text":"is the same as or greater than"},{"text":" ","type":"text"},{"text":"the first version of the SDK that includes the symbol,","type":"text"},{"text":" ","type":"text"},{"text":"the compiler can optimize away the runtime check","type":"text"},{"text":" ","type":"text"},{"text":"and call the SDK’s implementation directly.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this case,"},{"type":"text","text":" "},{"type":"text","text":"if you access the back-deployed symbol directly,"},{"text":" ","type":"text"},{"text":"the compiler can also omit","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the copy of the symbol’s implementation from the client."}]}],"name":"Note","type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions, methods, subscripts, and computed properties"},{"type":"text","text":" "},{"type":"text","text":"that meet the following criteria can be back deployed:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The declaration is ","type":"text"},{"type":"codeVoice","code":"public"},{"text":" or ","type":"text"},{"code":"@usableFromInline","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"For class instance methods and class type methods,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the method is marked "},{"code":"final","type":"codeVoice"},{"type":"text","text":" and isn’t marked "},{"code":"@objc","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation satisfies the requirements for an inlinable function,"},{"text":" ","type":"text"},{"text":"described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable","type":"reference","isActive":true},{"type":"text","text":"."}]}]}]},{"anchor":"discardableResult","level":3,"type":"heading","text":"discardableResult"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a function or method declaration"},{"type":"text","text":" "},{"type":"text","text":"to suppress the compiler warning"},{"text":" ","type":"text"},{"type":"text","text":"when the function or method that returns a value"},{"type":"text","text":" "},{"text":"is called without using its result.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"dynamicCallable","anchor":"dynamicCallable"},{"inlineContent":[{"text":"Apply this attribute to a class, structure, enumeration, or protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to treat instances of the type as callable functions."},{"type":"text","text":" "},{"text":"The type must implement either a ","type":"text"},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or both."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can call an instance of a dynamically callable type","type":"text"},{"type":"text","text":" "},{"text":"as if it’s a function that takes any number of arguments.","type":"text"}]},{"code":["@dynamicCallable","struct TelephoneExchange {","    func dynamicallyCall(withArguments phoneNumber: [Int]) {","        if phoneNumber == [4, 1, 1] {","            print(\"Get Swift help on forums.swift.org\")","        } else {","            print(\"Unrecognized number\")","        }","    }","}","","let dial = TelephoneExchange()","","\/\/ Use a dynamic method call.","dial(4, 1, 1)","\/\/ Prints \"Get Swift help on forums.swift.org\"","","dial(8, 6, 7, 5, 3, 0, 9)","\/\/ Prints \"Unrecognized number\"","","\/\/ Call the underlying method directly.","dial.dynamicallyCall(withArguments: [4, 1, 1])"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The declaration of the ","type":"text"},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"must have a single parameter that conforms to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"protocol — like "},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":" in the example above."},{"text":" ","type":"text"},{"text":"The return type can be any type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can include labels in a dynamic method call"},{"text":" ","type":"text"},{"type":"text","text":"if you implement the "},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"text":" method.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@dynamicCallable","struct Repeater {","    func dynamicallyCall(withKeywordArguments pairs: KeyValuePairs<String, Int>) -> String {","        return pairs","            .map { label, count in","                repeatElement(label, count: count).joined(separator: \" \")","            }","            .joined(separator: \"\\n\")","    }","}","","let repeatLabels = Repeater()","print(repeatLabels(a: 1, b: 2, c: 3, b: 2, a: 1))","\/\/ a","\/\/ b b","\/\/ c c c","\/\/ b b","\/\/ a"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The declaration of the ","type":"text"},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"must have a single parameter that conforms to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"},{"type":"text","text":" "},{"text":"protocol,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the return type can be any type."},{"type":"text","text":" "},{"type":"text","text":"The parameter’s "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"must be"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The previous example uses "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"as the parameter type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so that callers can include duplicate parameter labels —"},{"type":"text","text":" "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" appear multiple times in the call to "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If you implement both ","type":"text"},{"type":"codeVoice","code":"dynamicallyCall"},{"text":" methods,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"text":" is called","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the method call includes keyword arguments."},{"text":" ","type":"text"},{"type":"text","text":"In all other cases, "},{"code":"dynamicallyCall(withArguments:)","type":"codeVoice"},{"text":" is called.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can only call a dynamically callable instance"},{"type":"text","text":" "},{"type":"text","text":"with arguments and a return value that match the types you specify"},{"text":" ","type":"text"},{"type":"text","text":"in one of your "},{"type":"codeVoice","code":"dynamicallyCall"},{"text":" method implementations.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The call in the following example doesn’t compile because"},{"type":"text","text":" "},{"text":"there isn’t an implementation of ","type":"text"},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" "},{"text":"that takes ","type":"text"},{"type":"codeVoice","code":"KeyValuePairs<String, String>"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["repeatLabels(a: \"four\") \/\/ Error"]},{"anchor":"dynamicMemberLookup","type":"heading","text":"dynamicMemberLookup","level":3},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration, or protocol"},{"text":" ","type":"text"},{"type":"text","text":"to enable members to be looked up by name at runtime."},{"text":" ","type":"text"},{"text":"The type must implement a ","type":"text"},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"text":" subscript.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In an explicit member expression,","type":"text"},{"text":" ","type":"text"},{"text":"if there isn’t a corresponding declaration for the named member,","type":"text"},{"text":" ","type":"text"},{"text":"the expression is understood as a call to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the type’s "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"type":"text","text":" subscript,"},{"text":" ","type":"text"},{"type":"text","text":"passing information about the member as the argument."},{"text":" ","type":"text"},{"type":"text","text":"The subscript can accept a parameter that’s either a key path or a member name;"},{"text":" ","type":"text"},{"type":"text","text":"if you implement both subscripts,"},{"text":" ","type":"text"},{"text":"the subscript that takes key path argument is used.","type":"text"}]},{"inlineContent":[{"text":"An implementation of ","type":"text"},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"text":" ","type":"text"},{"text":"can accept key paths using an argument of type","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","type":"reference","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It can accept member names using an argument of a type that conforms to the"},{"text":" ","type":"text"},{"isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"ExpressibleByStringLiteral"}],"overridingTitle":"ExpressibleByStringLiteral","type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"},{"text":" protocol —","type":"text"},{"type":"text","text":" "},{"text":"in most cases, ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The subscript’s return type can be any type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Dynamic member lookup by member name"},{"type":"text","text":" "},{"text":"can be used to create a wrapper type around data","type":"text"},{"text":" ","type":"text"},{"text":"that can’t be type checked at compile time,","type":"text"},{"type":"text","text":" "},{"text":"such as when bridging data from other languages into Swift.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","code":["@dynamicMemberLookup","struct DynamicStruct {","    let dictionary = [\"someDynamicMember\": 325,","                      \"someOtherMember\": 787]","    subscript(dynamicMember member: String) -> Int {","        return dictionary[member] ?? 1054","    }","}","let s = DynamicStruct()","","\/\/ Use dynamic member lookup.","let dynamic = s.someDynamicMember","print(dynamic)","\/\/ Prints \"325\"","","\/\/ Call the underlying subscript directly.","let equivalent = s[dynamicMember: \"someDynamicMember\"]","print(dynamic == equivalent)","\/\/ Prints \"true\""],"syntax":"swift"},{"inlineContent":[{"text":"Dynamic member lookup by key path","type":"text"},{"text":" ","type":"text"},{"text":"can be used to implement a wrapper type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in a way that supports compile-time type checking."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["struct Point { var x, y: Int }","","@dynamicMemberLookup","struct PassthroughWrapper<Value> {","    var value: Value","    subscript<T>(dynamicMember member: KeyPath<Value, T>) -> T {","        get { return value[keyPath: member] }","    }","}","","let point = Point(x: 381, y: 431)","let wrapper = PassthroughWrapper(value: point)","print(wrapper.x)"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"freestanding","text":"freestanding","type":"heading"},{"inlineContent":[{"type":"text","text":"Apply the "},{"code":"freestanding","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"to the declaration of a freestanding macro.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"frozen","text":"frozen"},{"inlineContent":[{"text":"Apply this attribute to a structure or enumeration declaration","type":"text"},{"type":"text","text":" "},{"text":"to restrict the kinds of changes you can make to the type.","type":"text"},{"text":" ","type":"text"},{"text":"This attribute is allowed only when compiling in library evolution mode.","type":"text"},{"type":"text","text":" "},{"text":"Future versions of the library can’t change the declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by adding, removing, or reordering"},{"type":"text","text":" "},{"type":"text","text":"an enumeration’s cases"},{"text":" ","type":"text"},{"type":"text","text":"or a structure’s stored instance properties."},{"text":" ","type":"text"},{"type":"text","text":"These changes are allowed on nonfrozen types,"},{"text":" ","type":"text"},{"type":"text","text":"but they break ABI compatibility for frozen types."}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the compiler isn’t in library evolution mode,"},{"text":" ","type":"text"},{"type":"text","text":"all structures and enumerations are implicitly frozen,"},{"type":"text","text":" "},{"type":"text","text":"and this attribute is ignored."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In library evolution mode,"},{"text":" ","type":"text"},{"type":"text","text":"code that interacts with members of nonfrozen structures and enumerations"},{"type":"text","text":" "},{"text":"is compiled in a way that allows it to continue working without recompiling","type":"text"},{"type":"text","text":" "},{"text":"even if a future version of the library","type":"text"},{"type":"text","text":" "},{"type":"text","text":"adds, removes, or reorders some of that type’s members."},{"type":"text","text":" "},{"type":"text","text":"The compiler makes this possible using techniques like"},{"text":" ","type":"text"},{"text":"looking up information at runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and adding a layer of indirection."},{"type":"text","text":" "},{"text":"Marking a structure or enumeration as frozen","type":"text"},{"text":" ","type":"text"},{"text":"gives up this flexibility to gain performance:","type":"text"},{"type":"text","text":" "},{"text":"Future versions of the library can make only limited changes to the type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but the compiler can make additional optimizations"},{"type":"text","text":" "},{"type":"text","text":"in code that interacts with the type’s members."}]},{"inlineContent":[{"text":"Frozen types,","type":"text"},{"type":"text","text":" "},{"text":"the types of the stored properties of frozen structures,","type":"text"},{"type":"text","text":" "},{"text":"and the associated values of frozen enumeration cases","type":"text"},{"text":" ","type":"text"},{"text":"must be public or marked with the ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"text":"The properties of a frozen structure can’t have property observers,","type":"text"},{"type":"text","text":" "},{"text":"and expressions that provide the initial value for stored instance properties","type":"text"},{"text":" ","type":"text"},{"text":"must follow the same restrictions as inlinable functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To enable library evolution mode on the command line,"},{"text":" ","type":"text"},{"type":"text","text":"pass the "},{"code":"-enable-library-evolution","type":"codeVoice"},{"type":"text","text":" option to the Swift compiler."},{"type":"text","text":" "},{"type":"text","text":"To enable it in Xcode,"},{"type":"text","text":" "},{"text":"set the “Build Libraries for Distribution” build setting","type":"text"},{"type":"text","text":" "},{"text":"(","type":"text"},{"type":"codeVoice","code":"BUILD_LIBRARY_FOR_DISTRIBUTION"},{"type":"text","text":") to Yes,"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"type":"reference","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A switch statement over a frozen enumeration doesn’t require a "},{"type":"codeVoice","code":"default"},{"text":" case,","type":"text"},{"type":"text","text":" "},{"text":"as discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true,"type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Including a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" or "},{"code":"@unknown default","type":"codeVoice"},{"type":"text","text":" case"},{"text":" ","type":"text"},{"text":"when switching over a frozen enumeration","type":"text"},{"type":"text","text":" "},{"text":"produces a warning because that code is never executed.","type":"text"}],"type":"paragraph"},{"anchor":"GKInspectable","level":3,"type":"heading","text":"GKInspectable"},{"inlineContent":[{"type":"text","text":"Apply this attribute to expose a custom GameplayKit component property"},{"type":"text","text":" "},{"type":"text","text":"to the SpriteKit editor UI."},{"text":" ","type":"text"},{"text":"Applying this attribute also implies the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"},{"type":"heading","text":"inlinable","level":3,"anchor":"inlinable"},{"inlineContent":[{"text":"Apply this attribute to a","type":"text"},{"type":"text","text":" "},{"text":"function, method, computed property, subscript,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"convenience initializer, or deinitializer declaration"},{"type":"text","text":" "},{"type":"text","text":"to expose that declaration’s implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of the module’s public interface."},{"text":" ","type":"text"},{"type":"text","text":"The compiler is allowed to replace calls to an inlinable symbol"},{"type":"text","text":" "},{"type":"text","text":"with a copy of the symbol’s implementation at the call site."}],"type":"paragraph"},{"inlineContent":[{"text":"Inlinable code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can interact with "},{"code":"open","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"public"},{"text":" symbols declared in any module,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and it can interact with "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" symbols"},{"text":" ","type":"text"},{"type":"text","text":"declared in the same module"},{"text":" ","type":"text"},{"text":"that are marked with the ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"text":"Inlinable code can’t interact with ","type":"text"},{"code":"private","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"fileprivate","type":"codeVoice"},{"type":"text","text":" symbols."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This attribute can’t be applied","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to declarations that are nested inside functions"},{"type":"text","text":" "},{"text":"or to ","type":"text"},{"type":"codeVoice","code":"fileprivate"},{"text":" or ","type":"text"},{"code":"private","type":"codeVoice"},{"text":" declarations.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Functions and closures that are defined inside an inlinable function"},{"type":"text","text":" "},{"text":"are implicitly inlinable,","type":"text"},{"type":"text","text":" "},{"text":"even though they can’t be marked with this attribute.","type":"text"}]},{"type":"heading","text":"main","level":3,"anchor":"main"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a structure, class, or enumeration declaration"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that it contains the top-level entry point for program flow."},{"text":" ","type":"text"},{"type":"text","text":"The type must provide a "},{"code":"main","type":"codeVoice"},{"type":"text","text":" type function"},{"text":" ","type":"text"},{"text":"that doesn’t take any arguments and returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["@main","struct MyTopLevel {","    static func main() {","        \/\/ Top-level code goes here","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another way to describe the requirements of the "},{"code":"main","type":"codeVoice"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is that the type you write this attribute on"},{"type":"text","text":" "},{"text":"must satisfy the same requirements","type":"text"},{"type":"text","text":" "},{"text":"as types that conform to the following hypothetical protocol:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["protocol ProvidesMain {","    static func main() throws","}"]},{"type":"paragraph","inlineContent":[{"text":"The Swift code you compile to make an executable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"text":"as discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"heading","text":"nonobjc","anchor":"nonobjc","level":3},{"inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"text":" ","type":"text"},{"type":"text","text":"method, property, subscript, or initializer declaration"},{"text":" ","type":"text"},{"type":"text","text":"to suppress an implicit "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"nonobjc","type":"codeVoice"},{"text":" attribute tells the compiler","type":"text"},{"text":" ","type":"text"},{"text":"to make the declaration unavailable in Objective-C code,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even though it’s possible to represent it in Objective-C."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying this attribute to an extension"},{"text":" ","type":"text"},{"type":"text","text":"has the same effect as"},{"text":" ","type":"text"},{"type":"text","text":"applying it to every member of that extension"},{"text":" ","type":"text"},{"type":"text","text":"that isn’t explicitly marked with the "},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You use the "},{"code":"nonobjc","type":"codeVoice"},{"text":" attribute to resolve circularity","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for bridging methods in a class marked with the "},{"code":"objc","type":"codeVoice"},{"text":" attribute,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to allow overloading of methods and initializers"},{"text":" ","type":"text"},{"type":"text","text":"in a class marked with the "},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"can’t override a method marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"text":"However, a method marked with the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"can override a method marked with the "},{"code":"nonobjc","type":"codeVoice"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Similarly, a method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can’t satisfy a protocol requirement"},{"type":"text","text":" "},{"text":"for a method marked with the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"anchor":"NSApplicationMain","text":"NSApplicationMain","level":3,"type":"heading"},{"style":"note","name":"Deprecated","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"This attribute is deprecated;"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","isActive":true},{"text":" attribute instead.","type":"text"},{"text":" ","type":"text"},{"text":"In Swift 6,","type":"text"},{"text":" ","type":"text"},{"text":"using this attribute will be an error.","type":"text"}]}]},{"inlineContent":[{"text":"Apply this attribute to a class","type":"text"},{"type":"text","text":" "},{"text":"to indicate that it’s the app delegate.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Using this attribute is equivalent to calling the"},{"text":" ","type":"text"},{"code":"NSApplicationMain(_:_:)","type":"codeVoice"},{"text":" function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you don’t use this attribute,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"supply a "},{"type":"codeVoice","code":"main.swift"},{"type":"text","text":" file with code at the top level"},{"text":" ","type":"text"},{"type":"text","text":"that calls the "},{"type":"codeVoice","code":"NSApplicationMain(_:_:)"},{"type":"text","text":" function as follows:"}],"type":"paragraph"},{"code":["import AppKit","NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The Swift code you compile to make an executable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","type":"reference","isActive":true},{"text":".","type":"text"}]},{"text":"NSCopying","level":3,"type":"heading","anchor":"NSCopying"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a stored variable property of a class."},{"type":"text","text":" "},{"type":"text","text":"This attribute causes the property’s setter to be synthesized with a "},{"type":"emphasis","inlineContent":[{"text":"copy","type":"text"}]},{"text":" ","type":"text"},{"text":"of the property’s value — returned by the ","type":"text"},{"type":"codeVoice","code":"copyWithZone(_:)"},{"type":"text","text":" method — instead of the"},{"type":"text","text":" "},{"text":"value of the property itself.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The type of the property must conform to the "},{"type":"codeVoice","code":"NSCopying"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NSCopying"},{"type":"text","text":" attribute behaves in a way similar to the Objective-C "},{"type":"codeVoice","code":"copy"},{"type":"text","text":" "},{"text":"property attribute.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"NSManaged","anchor":"NSManaged"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to an instance method or stored variable property"},{"type":"text","text":" "},{"text":"of a class that inherits from ","type":"text"},{"code":"NSManagedObject","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that Core Data dynamically provides its implementation at runtime,"},{"type":"text","text":" "},{"type":"text","text":"based on the associated entity description."},{"text":" ","type":"text"},{"type":"text","text":"For a property marked with the "},{"type":"codeVoice","code":"NSManaged"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"text":"Core Data also provides the storage at runtime.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Applying this attribute also implies the "},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}]},{"anchor":"objc","text":"objc","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to any declaration that can be represented in Objective-C —","type":"text"},{"type":"text","text":" "},{"text":"for example, nonnested classes, protocols,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"nongeneric enumerations (constrained to integer raw-value types),"},{"type":"text","text":" "},{"type":"text","text":"properties and methods (including getters and setters) of classes,"},{"type":"text","text":" "},{"type":"text","text":"protocols and optional members of a protocol,"},{"type":"text","text":" "},{"type":"text","text":"initializers, and subscripts."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute tells the compiler"},{"text":" ","type":"text"},{"type":"text","text":"that a declaration is available to use in Objective-C code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying this attribute to an extension"},{"type":"text","text":" "},{"text":"has the same effect as","type":"text"},{"type":"text","text":" "},{"text":"applying it to every member of that extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that isn’t explicitly marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute."}]},{"inlineContent":[{"type":"text","text":"The compiler implicitly adds the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to subclasses of any class defined in Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"However, the subclass must not be generic,"},{"text":" ","type":"text"},{"type":"text","text":"and must not inherit from any generic classes."},{"type":"text","text":" "},{"text":"You can explicitly add the ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to a subclass that meets these criteria,"},{"text":" ","type":"text"},{"text":"to specify its Objective-C name as discussed below.","type":"text"},{"type":"text","text":" "},{"text":"Protocols that are marked with the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute can’t inherit"},{"type":"text","text":" "},{"text":"from protocols that aren’t marked with this attribute.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute is also implicitly added in the following cases:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The declaration is an override in a subclass,"},{"text":" ","type":"text"},{"type":"text","text":"and the superclass’s declaration has the "},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The declaration satisfies a requirement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from a protocol that has the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration has the "},{"code":"IBAction","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"IBDesignable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"IBInspectable"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"NSManaged","type":"codeVoice"},{"type":"text","text":", or "},{"code":"GKInspectable","type":"codeVoice"},{"type":"text","text":" attribute."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"If you apply the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute to an enumeration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each enumeration case is exposed to Objective-C code"},{"type":"text","text":" "},{"text":"as the concatenation of the enumeration name and the case name.","type":"text"},{"type":"text","text":" "},{"text":"The first letter of the case name is capitalized.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, a case named "},{"type":"codeVoice","code":"venus"},{"type":"text","text":" in a Swift "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" enumeration"},{"type":"text","text":" "},{"type":"text","text":"is exposed to Objective-C code as a case named "},{"code":"PlanetVenus","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute optionally accepts a single attribute argument,"},{"type":"text","text":" "},{"text":"which consists of an identifier.","type":"text"},{"type":"text","text":" "},{"text":"The identifier specifies the name to be exposed to Objective-C","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for the entity that the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute applies to."},{"type":"text","text":" "},{"text":"You can use this argument to name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, enumerations, enumeration cases, protocols,"},{"type":"text","text":" "},{"type":"text","text":"methods, getters, setters, and initializers."},{"type":"text","text":" "},{"text":"If you specify the Objective-C name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for a class, protocol, or enumeration,"},{"type":"text","text":" "},{"text":"include a three-letter prefix on the name,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","type":"reference","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The example below exposes"},{"type":"text","text":" "},{"type":"text","text":"the getter for the "},{"code":"enabled","type":"codeVoice"},{"text":" property of the ","type":"text"},{"code":"ExampleClass","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to Objective-C code as ","type":"text"},{"code":"isEnabled","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"rather than just as the name of the property itself."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class ExampleClass: NSObject {","    @objc var enabled: Bool {","        @objc(isEnabled) get {","            \/\/ Return the appropriate value","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"For more information, see"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The argument to the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"can also change the runtime name for that declaration."},{"type":"text","text":" "},{"type":"text","text":"You use the runtime name when calling functions"},{"type":"text","text":" "},{"text":"that interact with the Objective-C runtime,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and when specifying class names in an app’s Info.plist file.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you specify a name by passing an argument,"},{"text":" ","type":"text"},{"text":"that name is used as the name in Objective-C code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and as the runtime name."},{"type":"text","text":" "},{"type":"text","text":"If you omit the argument,"},{"type":"text","text":" "},{"text":"the name used in Objective-C code matches the name in Swift code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the runtime name follows the normal Swift compiler convention"},{"text":" ","type":"text"},{"type":"text","text":"of name mangling."}]}],"style":"note"},{"text":"objcMembers","type":"heading","level":3,"anchor":"objcMembers"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class declaration,","type":"text"},{"type":"text","text":" "},{"text":"to implicitly apply the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to all Objective-C compatible members of the class,"},{"text":" ","type":"text"},{"text":"its extensions, its subclasses, and all of the extensions of its subclasses.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most code should use the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute instead,"},{"type":"text","text":" "},{"type":"text","text":"to expose only the declarations that are needed."},{"text":" ","type":"text"},{"type":"text","text":"If you need to expose many declarations,"},{"type":"text","text":" "},{"type":"text","text":"you can group them in an extension that has the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"objcMembers","type":"codeVoice"},{"text":" attribute is a convenience for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"libraries that make heavy use of"},{"type":"text","text":" "},{"text":"the introspection facilities of the Objective-C runtime.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Applying the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute when it isn’t needed"},{"type":"text","text":" "},{"type":"text","text":"can increase your binary size and adversely affect performance."}]},{"text":"preconcurrency","anchor":"preconcurrency","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Apply this attribute to a declaration,"},{"type":"text","text":" "},{"text":"to suppress strict concurrency checking.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can apply this attribute"},{"type":"text","text":" "},{"type":"text","text":"to the following kinds of declarations:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Imports","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Structures, classes, and actors"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enumerations and enumeration cases"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Protocols","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Variables and constants"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Subscripts"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Initializers","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Functions","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"On an import declaration,"},{"text":" ","type":"text"},{"text":"this attribute reduces the strictness of concurrency checking","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for code that uses types from the imported module."},{"type":"text","text":" "},{"type":"text","text":"Specifically,"},{"type":"text","text":" "},{"type":"text","text":"types from the imported module"},{"text":" ","type":"text"},{"type":"text","text":"that aren’t explicitly marked as nonsendable"},{"text":" ","type":"text"},{"text":"can be used in a context that requires sendable types.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"On other declarations,"},{"text":" ","type":"text"},{"type":"text","text":"this attribute reduces the strictness of concurrency checking"},{"type":"text","text":" "},{"text":"for code that uses the symbol being declared.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you use this symbol in a scope that has minimal concurrency checking,"},{"type":"text","text":" "},{"type":"text","text":"concurrency-related constraints specified by that symbol,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"code":"Sendable","type":"codeVoice"},{"text":" requirements or global actors,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"aren’t checked."}],"type":"paragraph"},{"inlineContent":[{"text":"You can use this attribute as follows,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to aid in migrating code to strict concurrency checking:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enable strict checking."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Annotate imports with the ","type":"text"},{"code":"preconcurrency","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"for modules that haven’t enabled strict checking."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After migrating a module to strict checking,"},{"type":"text","text":" "},{"text":"remove the ","type":"text"},{"type":"codeVoice","code":"preconcurrency"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"text":"The compiler warns you about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any places where the "},{"type":"codeVoice","code":"preconcurrency"},{"text":" attribute on an import","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"no longer has an effect and should be removed."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"For other declarations,","type":"text"},{"text":" ","type":"text"},{"text":"add the ","type":"text"},{"type":"codeVoice","code":"preconcurrency"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"when you add concurrency-related constraints to the declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you still have clients"},{"type":"text","text":" "},{"text":"that haven’t migrated to strict checking.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Remove the "},{"code":"preconcurrency","type":"codeVoice"},{"type":"text","text":" attribute after all your clients have migrated."}]},{"inlineContent":[{"text":"Declarations from Objective-C are always imported","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as if they were marked with the "},{"type":"codeVoice","code":"preconcurrency"},{"type":"text","text":" attribute."}],"type":"paragraph"},{"anchor":"propertyWrapper","level":3,"text":"propertyWrapper","type":"heading"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, or enumeration declaration"},{"text":" ","type":"text"},{"type":"text","text":"to use that type as a property wrapper."},{"type":"text","text":" "},{"type":"text","text":"When you apply this attribute to a type,"},{"type":"text","text":" "},{"type":"text","text":"you create a custom attribute with the same name as the type."},{"type":"text","text":" "},{"type":"text","text":"Apply that new attribute to a property of a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to wrap access to the property through an instance of the wrapper type;"},{"type":"text","text":" "},{"type":"text","text":"apply the attribute to a local stored variable declaration"},{"text":" ","type":"text"},{"type":"text","text":"to wrap access to the variable the same way."},{"type":"text","text":" "},{"type":"text","text":"Computed variables, global variables, and constants can’t use property wrappers."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The wrapper must define a "},{"code":"wrappedValue","type":"codeVoice"},{"text":" instance property.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"wrapped value","type":"text"}]},{"type":"text","text":" of the property"},{"text":" ","type":"text"},{"type":"text","text":"is the value that the getter and setter for this property expose."},{"type":"text","text":" "},{"text":"In most cases, ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"text":" is a computed value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but it can be a stored value instead."},{"type":"text","text":" "},{"text":"The wrapper defines and manages","type":"text"},{"type":"text","text":" "},{"text":"any underlying storage needed by its wrapped value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The compiler synthesizes storage for the instance of the wrapper type"},{"type":"text","text":" "},{"type":"text","text":"by prefixing the name of the wrapped property with an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") —"},{"text":" ","type":"text"},{"text":"for example, the wrapper for ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is stored as "},{"type":"codeVoice","code":"_someProperty"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The synthesized storage for the wrapper has an access control level of "},{"type":"codeVoice","code":"private"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property that has a property wrapper"},{"type":"text","text":" "},{"type":"text","text":"can include "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" blocks,"},{"text":" ","type":"text"},{"type":"text","text":"but it can’t override the compiler-synthesized "},{"type":"codeVoice","code":"get"},{"type":"text","text":" or "},{"type":"codeVoice","code":"set"},{"text":" blocks.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Swift provides two forms of syntactic sugar"},{"text":" ","type":"text"},{"type":"text","text":"for initialization of a property wrapper."},{"type":"text","text":" "},{"type":"text","text":"You can use assignment syntax in the definition of a wrapped value"},{"type":"text","text":" "},{"type":"text","text":"to pass the expression on the right-hand side of the assignment"},{"type":"text","text":" "},{"text":"as the argument to the ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"text":" parameter","type":"text"},{"type":"text","text":" "},{"text":"of the property wrapper’s initializer.","type":"text"},{"text":" ","type":"text"},{"text":"You can also provide arguments to the attribute","type":"text"},{"type":"text","text":" "},{"text":"when you apply it to a property,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and those arguments are passed to the property wrapper’s initializer."},{"type":"text","text":" "},{"text":"For example, in the code below,","type":"text"},{"type":"text","text":" "},{"code":"SomeStruct","type":"codeVoice"},{"text":" calls each of the initializers that ","type":"text"},{"type":"codeVoice","code":"SomeWrapper"},{"text":" defines.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@propertyWrapper","struct SomeWrapper {","    var wrappedValue: Int","    var someValue: Double","    init() {","        self.wrappedValue = 100","        self.someValue = 12.3","    }","    init(wrappedValue: Int) {","        self.wrappedValue = wrappedValue","        self.someValue = 45.6","    }","    init(wrappedValue value: Int, custom: Double) {","        self.wrappedValue = value","        self.someValue = custom","    }","}","","struct SomeStruct {","    \/\/ Uses init()","    @SomeWrapper var a: Int","","    \/\/ Uses init(wrappedValue:)","    @SomeWrapper var b = 10","","    \/\/ Both use init(wrappedValue:custom:)","    @SomeWrapper(custom: 98.7) var c = 30","    @SomeWrapper(wrappedValue: 30, custom: 98.7) var d","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"projected value"}]},{"type":"text","text":" for a wrapped property is a second value"},{"text":" ","type":"text"},{"text":"that a property wrapper can use to expose additional functionality.","type":"text"},{"text":" ","type":"text"},{"text":"The author of a property wrapper type","type":"text"},{"text":" ","type":"text"},{"text":"is responsible for determining the meaning of its projected value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and defining the interface that the projected value exposes."},{"text":" ","type":"text"},{"type":"text","text":"To project a value from a property wrapper,"},{"text":" ","type":"text"},{"type":"text","text":"define a "},{"type":"codeVoice","code":"projectedValue"},{"type":"text","text":" instance property on the wrapper type."},{"text":" ","type":"text"},{"type":"text","text":"The compiler synthesizes an identifier for the projected value"},{"type":"text","text":" "},{"type":"text","text":"by prefixing the name of the wrapped property with a dollar sign ("},{"type":"codeVoice","code":"$"},{"type":"text","text":") —"},{"type":"text","text":" "},{"text":"for example, the projected value for ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is "},{"code":"$someProperty","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The projected value has the same access control level","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the original wrapped property."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct WrapperWithProjection {","    var wrappedValue: Int","    var projectedValue: SomeProjection {","        return SomeProjection(wrapper: self)","    }","}","struct SomeProjection {","    var wrapper: WrapperWithProjection","}","","struct SomeStruct {","    @WrapperWithProjection var x = 123","}","let s = SomeStruct()","s.x           \/\/ Int value","s.$x          \/\/ SomeProjection value","s.$x.wrapper  \/\/ WrapperWithProjection value"]},{"anchor":"resultBuilder","type":"heading","text":"resultBuilder","level":3},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration"},{"type":"text","text":" "},{"type":"text","text":"to use that type as a result builder."},{"text":" ","type":"text"},{"type":"text","text":"A "},{"inlineContent":[{"text":"result builder","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a type"},{"type":"text","text":" "},{"text":"that builds a nested data structure step by step.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You use result builders to implement a domain-specific language (DSL)"},{"type":"text","text":" "},{"type":"text","text":"for creating nested data structures in a natural, declarative way."},{"type":"text","text":" "},{"type":"text","text":"For an example of how to use the "},{"type":"codeVoice","code":"resultBuilder"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":4,"anchor":"Result-Building-Methods","text":"Result-Building Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A result builder implements static methods described below."},{"text":" ","type":"text"},{"type":"text","text":"Because all of the result builder’s functionality"},{"text":" ","type":"text"},{"type":"text","text":"is exposed through static methods,"},{"type":"text","text":" "},{"type":"text","text":"you don’t ever initialize an instance of that type."},{"text":" ","type":"text"},{"type":"text","text":"A result builder must implement either the "},{"code":"buildBlock(_:)","type":"codeVoice"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"or both the "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"type":"text","text":" methods."},{"type":"text","text":" "},{"type":"text","text":"The other methods —"},{"type":"text","text":" "},{"type":"text","text":"which enable additional functionality in the DSL —"},{"text":" ","type":"text"},{"text":"are optional.","type":"text"},{"text":" ","type":"text"},{"text":"The declaration of a result builder type","type":"text"},{"type":"text","text":" "},{"text":"doesn’t actually have to include any protocol conformance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The description of the static methods uses three types as placeholders.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The type "},{"code":"Expression","type":"codeVoice"},{"text":" is a placeholder","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for the type of the result builder’s input,"},{"type":"text","text":" "},{"code":"Component","type":"codeVoice"},{"type":"text","text":" is a placeholder for the type of a partial result,"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"FinalResult"},{"text":" is a placeholder","type":"text"},{"type":"text","text":" "},{"text":"for the type of the result that the result builder produces.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You replace these types with the actual types that your result builder uses."},{"text":" ","type":"text"},{"type":"text","text":"If your result-building methods"},{"type":"text","text":" "},{"text":"don’t specify a type for ","type":"text"},{"code":"Expression","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"FinalResult"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"they default to being the same as ","type":"text"},{"type":"codeVoice","code":"Component"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The block-building methods are as follows:"}],"type":"paragraph"},{"items":[{"definition":{"content":[{"inlineContent":[{"text":"Combines an array of partial results into a single partial result.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"code":"static func buildBlock(_ components: Component...) -> Component","type":"codeVoice"}]}},{"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result component from the first component. Implement both this method and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" to support building blocks one component at a time. Compared to "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":", this approach reduces the need for generic overloads that handle different numbers of arguments."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildPartialBlock(first: Component) -> Component"}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildPartialBlock(accumulated: Component, next: Component) -> Component"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result component by combining an accumulated component with a new component. Implement both this method and "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" to support building blocks one component at a time. Compared to "},{"code":"buildBlock(_:)","type":"codeVoice"},{"type":"text","text":", this approach reduces the need for generic overloads that handle different numbers of arguments."}]}]}}],"type":"termList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A result builder can implement all three of the block-building methods listed above;"},{"text":" ","type":"text"},{"type":"text","text":"in that case, availability determines which method is called."},{"type":"text","text":" "},{"type":"text","text":"By default, Swift calls the "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" "},{"type":"text","text":"methods. To make Swift call "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" instead,"},{"type":"text","text":" "},{"text":"mark the enclosing declaration as being available","type":"text"},{"type":"text","text":" "},{"text":"before the availability you write on ","type":"text"},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The additional result-building methods are as follows:"}],"type":"paragraph"},{"type":"termList","items":[{"term":{"inlineContent":[{"code":"static func buildOptional(_ component: Component?) -> Component","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result from a partial result that can be "},{"type":"codeVoice","code":"nil"},{"text":". Implement this method to support ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statements that don’t include an "},{"code":"else","type":"codeVoice"},{"type":"text","text":" clause."}],"type":"paragraph"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result whose value varies depending on some condition. Implement both this method and "},{"code":"buildEither(second:)","type":"codeVoice"},{"type":"text","text":" to support "},{"type":"codeVoice","code":"switch"},{"text":" statements and ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statements that include an "},{"code":"else","type":"codeVoice"},{"type":"text","text":" clause."}],"type":"paragraph"}]},"term":{"inlineContent":[{"code":"static func buildEither(first: Component) -> Component","type":"codeVoice"}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildEither(second: Component) -> Component"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result whose value varies depending on some condition. Implement both this method and "},{"code":"buildEither(first:)","type":"codeVoice"},{"type":"text","text":" to support "},{"code":"switch","type":"codeVoice"},{"text":" statements and ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statements that include an "},{"code":"else","type":"codeVoice"},{"type":"text","text":" clause."}]}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildArray(_ components: [Component]) -> Component"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result from an array of partial results. Implement this method to support "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loops."}]}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildExpression(_ expression: Expression) -> Component"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result from an expression. You can implement this method to perform preprocessing — for example, converting expressions to an internal type — or to provide additional information for type inference at use sites."}]}]}},{"term":{"inlineContent":[{"code":"static func buildFinalResult(_ component: Component) -> FinalResult","type":"codeVoice"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a final result from a partial result. You can implement this method as part of a result builder that uses a different type for partial and final results, or to perform other postprocessing on a result before returning it."}]}]}},{"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result that propagates or erases type information outside a compiler-control statement that performs an availability check. You can use this to erase type information that varies between the conditional branches.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"code":"static func buildLimitedAvailability(_ component: Component) -> Component","type":"codeVoice"}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the code below defines a simple result builder"},{"type":"text","text":" "},{"type":"text","text":"that builds an array of integers."},{"text":" ","type":"text"},{"type":"text","text":"This code defines "},{"code":"Component","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Expression","type":"codeVoice"},{"text":" as type aliases,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to make it easier to match the examples below to the list of methods above."}]},{"code":["@resultBuilder","struct ArrayBuilder {","    typealias Component = [Int]","    typealias Expression = Int","    static func buildExpression(_ element: Expression) -> Component {","        return [element]","    }","    static func buildOptional(_ component: Component?) -> Component {","        guard let component = component else { return [] }","        return component","    }","    static func buildEither(first component: Component) -> Component {","        return component","    }","    static func buildEither(second component: Component) -> Component {","        return component","    }","    static func buildArray(_ components: [Component]) -> Component {","        return Array(components.joined())","    }","    static func buildBlock(_ components: Component...) -> Component {","        return Array(components.joined())","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Result-Transformations","type":"heading","text":"Result Transformations","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following syntactic transformations are applied recursively"},{"type":"text","text":" "},{"type":"text","text":"to turn code that uses result-builder syntax"},{"type":"text","text":" "},{"type":"text","text":"into code that calls the static methods of the result builder type:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the result builder has a "},{"type":"codeVoice","code":"buildExpression(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"each expression becomes a call to that method."},{"type":"text","text":" "},{"text":"This transformation is always first.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, the following declarations are equivalent:"}]},{"code":["@ArrayBuilder var builderNumber: [Int] { 10 }","var manualNumber = ArrayBuilder.buildExpression(10)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An assignment statement is transformed like an expression,"},{"type":"text","text":" "},{"type":"text","text":"but is understood to evaluate to "},{"type":"codeVoice","code":"()"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can define an overload of "},{"type":"codeVoice","code":"buildExpression(_:)"},{"text":" ","type":"text"},{"type":"text","text":"that takes an argument of type "},{"type":"codeVoice","code":"()"},{"type":"text","text":" to handle assignments specifically."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A branch statement that checks an availability condition"},{"type":"text","text":" "},{"type":"text","text":"becomes a call to the "},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This transformation happens before the transformation into a call to"},{"type":"text","text":" "},{"code":"buildEither(first:)","type":"codeVoice"},{"type":"text","text":", "},{"code":"buildEither(second:)","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"buildOptional(_:)"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"You use the "},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"type":"text","text":" method to erase type information"},{"text":" ","type":"text"},{"type":"text","text":"that changes depending on which branch is taken."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buildEither(first:)"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":" methods below"},{"type":"text","text":" "},{"text":"use a generic type that captures type information about both branches.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["protocol Drawable {","    func draw() -> String","}","struct Text: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","struct Line<D: Drawable>: Drawable {","    var elements: [D]","    func draw() -> String {","        return elements.map { $0.draw() }.joined(separator: \"\")","    }","}","struct DrawEither<First: Drawable, Second: Drawable>: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","","@resultBuilder","struct DrawingBuilder {","    static func buildBlock<D: Drawable>(_ components: D...) -> Line<D> {","        return Line(elements: components)","    }","    static func buildEither<First, Second>(first: First)","            -> DrawEither<First, Second> {","        return DrawEither(content: first)","    }","    static func buildEither<First, Second>(second: Second)","            -> DrawEither<First, Second> {","        return DrawEither(content: second)","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, this approach causes a problem in code that has availability checks:"}],"type":"paragraph"},{"syntax":"swift","code":["@available(macOS 99, *)","struct FutureText: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","@DrawingBuilder var brokenDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")  \/\/ Problem","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of brokenDrawing is Line<DrawEither<Line<FutureText>, Line<Text>>>"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"code":"FutureText","type":"codeVoice"},{"type":"text","text":" appears as part of the type of "},{"type":"codeVoice","code":"brokenDrawing"},{"type":"text","text":" "},{"text":"because it’s one of the types in the ","type":"text"},{"code":"DrawEither","type":"codeVoice"},{"type":"text","text":" generic type."},{"type":"text","text":" "},{"type":"text","text":"This could cause your program to crash if "},{"code":"FutureText","type":"codeVoice"},{"type":"text","text":" "},{"text":"isn’t available at runtime,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even in the case where that type is explicitly not being used."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To solve this problem,"},{"text":" ","type":"text"},{"text":"implement a ","type":"text"},{"type":"codeVoice","code":"buildLimitedAvailability(_:)"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"text":"to erase type information.","type":"text"},{"type":"text","text":" "},{"text":"For example, the code below builds an ","type":"text"},{"code":"AnyDrawable","type":"codeVoice"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"from its availability check."}],"type":"paragraph"},{"syntax":"swift","code":["struct AnyDrawable: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","extension DrawingBuilder {","    static func buildLimitedAvailability(_ content: Drawable) -> AnyDrawable {","        return AnyDrawable(content: content)","    }","}","","@DrawingBuilder var typeErasedDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of typeErasedDrawing is Line<DrawEither<AnyDrawable, Line<Text>>>"],"type":"codeListing"}]},{"content":[{"inlineContent":[{"type":"text","text":"A branch statement becomes a series of nested calls to the"},{"type":"text","text":" "},{"code":"buildEither(first:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"buildEither(second:)","type":"codeVoice"},{"type":"text","text":" methods."},{"type":"text","text":" "},{"type":"text","text":"The statements’ conditions and cases are mapped onto"},{"type":"text","text":" "},{"type":"text","text":"the leaf nodes of a binary tree,"},{"type":"text","text":" "},{"type":"text","text":"and the statement becomes"},{"type":"text","text":" "},{"text":"a nested call to the ","type":"text"},{"type":"codeVoice","code":"buildEither"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"type":"text","text":"following the path to that leaf node from the root node."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you write a switch statement that has three cases,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler uses a binary tree with three leaf nodes."},{"type":"text","text":" "},{"text":"Likewise,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because the path from the root node to the second case is"},{"type":"text","text":" "},{"text":"“second child” and then “first child”,","type":"text"},{"text":" ","type":"text"},{"text":"that case becomes a nested call like","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"buildEither(first: buildEither(second: ... ))"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The following declarations are equivalent:"}]},{"type":"codeListing","syntax":"swift","code":["let someNumber = 19","@ArrayBuilder var builderConditional: [Int] {","    if someNumber < 12 {","        31","    } else if someNumber == 19 {","        32","    } else {","        33","    }","}","","var manualConditional: [Int]","if someNumber < 12 {","    let partialResult = ArrayBuilder.buildExpression(31)","    let outerPartialResult = ArrayBuilder.buildEither(first: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else if someNumber == 19 {","    let partialResult = ArrayBuilder.buildExpression(32)","    let outerPartialResult = ArrayBuilder.buildEither(second: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else {","    let partialResult = ArrayBuilder.buildExpression(33)","    manualConditional = ArrayBuilder.buildEither(second: partialResult)","}"]}]},{"content":[{"inlineContent":[{"text":"A branch statement that might not produce a value,","type":"text"},{"text":" ","type":"text"},{"text":"like an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement without an "},{"code":"else","type":"codeVoice"},{"type":"text","text":" clause,"},{"type":"text","text":" "},{"text":"becomes a call to ","type":"text"},{"code":"buildOptional(_:)","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"If the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement’s condition is satisfied,"},{"type":"text","text":" "},{"type":"text","text":"its code block is transformed and passed as the argument;"},{"text":" ","type":"text"},{"type":"text","text":"otherwise, "},{"code":"buildOptional(_:)","type":"codeVoice"},{"type":"text","text":" is called with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" as its argument."},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}],"type":"paragraph"},{"code":["@ArrayBuilder var builderOptional: [Int] {","    if (someNumber % 2) == 1 { 20 }","}","","var partialResult: [Int]? = nil","if (someNumber % 2) == 1 {","    partialResult = ArrayBuilder.buildExpression(20)","}","var manualOptional = ArrayBuilder.buildOptional(partialResult)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the result builder implements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"type":"text","text":" methods,"},{"type":"text","text":" "},{"text":"a code block or ","type":"text"},{"type":"codeVoice","code":"do"},{"text":" statement becomes a call to those methods.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The first statement inside of the block"},{"type":"text","text":" "},{"text":"is transformed to become an argument","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"and the remaining statements become nested calls","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}]},{"type":"codeListing","code":["struct DrawBoth<First: Drawable, Second: Drawable>: Drawable {","    var first: First","    var second: Second","    func draw() -> String { return first.draw() + second.draw() }","}","","@resultBuilder","struct DrawingPartialBlockBuilder {","    static func buildPartialBlock<D: Drawable>(first: D) -> D {","        return first","    }","    static func buildPartialBlock<Accumulated: Drawable, Next: Drawable>(","        accumulated: Accumulated, next: Next","    ) -> DrawBoth<Accumulated, Next> {","        return DrawBoth(first: accumulated, second: next)","    }","}","","@DrawingPartialBlockBuilder var builderBlock: some Drawable {","    Text(\"First\")","    Line(elements: [Text(\"Second\"), Text(\"Third\")])","    Text(\"Last\")","}","","let partialResult1 = DrawingPartialBlockBuilder.buildPartialBlock(first: Text(\"first\"))","let partialResult2 = DrawingPartialBlockBuilder.buildPartialBlock(","    accumulated: partialResult1,","    next: Line(elements: [Text(\"Second\"), Text(\"Third\")])",")","let manualResult = DrawingPartialBlockBuilder.buildPartialBlock(","    accumulated: partialResult2,","    next: Text(\"Last\")",")"],"syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, a code block or "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"becomes a call to the "},{"type":"codeVoice","code":"buildBlock(_:)"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Each of the statements inside of the block is transformed,"},{"type":"text","text":" "},{"type":"text","text":"one at a time,"},{"text":" ","type":"text"},{"type":"text","text":"and they become the arguments to the "},{"code":"buildBlock(_:)","type":"codeVoice"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"For example, the following declarations are equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@ArrayBuilder var builderBlock: [Int] {","    100","    200","    300","}","","var manualBlock = ArrayBuilder.buildBlock(","    ArrayBuilder.buildExpression(100),","    ArrayBuilder.buildExpression(200),","    ArrayBuilder.buildExpression(300)",")"]}]},{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":" loop becomes a temporary variable, a "},{"code":"for","type":"codeVoice"},{"text":" loop,","type":"text"},{"type":"text","text":" "},{"text":"and call to the ","type":"text"},{"code":"buildArray(_:)","type":"codeVoice"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The new "},{"code":"for","type":"codeVoice"},{"text":" loop iterates over the sequence","type":"text"},{"text":" ","type":"text"},{"text":"and appends each partial result to that array.","type":"text"},{"text":" ","type":"text"},{"text":"The temporary array is passed as the argument in the ","type":"text"},{"type":"codeVoice","code":"buildArray(_:)"},{"type":"text","text":" call."},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@ArrayBuilder var builderArray: [Int] {","    for i in 5...7 {","        100 + i","    }","}","","var temporary: [[Int]] = []","for i in 5...7 {","    let partialResult = ArrayBuilder.buildExpression(100 + i)","    temporary.append(partialResult)","}","let manualArray = ArrayBuilder.buildArray(temporary)"]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the result builder has a "},{"code":"buildFinalResult(_:)","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"the final result becomes a call to that method."},{"text":" ","type":"text"},{"type":"text","text":"This transformation is always last."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although the transformation behavior is described in terms of temporary variables,"},{"type":"text","text":" "},{"text":"using a result builder doesn’t actually create any new declarations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that are visible from the rest of your code."}]},{"inlineContent":[{"type":"text","text":"You can’t use"},{"text":" ","type":"text"},{"type":"codeVoice","code":"break"},{"text":", ","type":"text"},{"type":"codeVoice","code":"continue"},{"type":"text","text":", "},{"type":"codeVoice","code":"defer"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"text":", or ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" statements,"},{"text":" ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" statements,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"text":" statements","type":"text"},{"type":"text","text":" "},{"text":"in the code that a result builder transforms.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The transformation process doesn’t change declarations in the code,"},{"type":"text","text":" "},{"text":"which lets you use temporary constants and variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to build up expressions piece by piece."},{"text":" ","type":"text"},{"type":"text","text":"It also doesn’t change"},{"text":" ","type":"text"},{"type":"codeVoice","code":"throw"},{"text":" statements,","type":"text"},{"type":"text","text":" "},{"text":"compile-time diagnostic statements,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or closures that contain a "},{"code":"return","type":"codeVoice"},{"text":" statement.","type":"text"}]},{"inlineContent":[{"text":"Whenever possible, transformations are coalesced.","type":"text"},{"type":"text","text":" "},{"text":"For example, the expression ","type":"text"},{"type":"codeVoice","code":"4 + 5 * 6"},{"text":" becomes","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"buildExpression(4 + 5 * 6)"},{"text":" rather multiple calls to that function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Likewise, nested branch statements become"},{"type":"text","text":" "},{"type":"text","text":"a single binary tree of calls to the "},{"type":"codeVoice","code":"buildEither"},{"text":" methods.","type":"text"}],"type":"paragraph"},{"type":"heading","level":4,"anchor":"Custom-Result-Builder-Attributes","text":"Custom Result-Builder Attributes"},{"inlineContent":[{"text":"Creating a result builder type creates a custom attribute with the same name.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can apply that attribute in the following places:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"On a function declaration,"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of the function."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"On a variable or subscript declaration that includes a getter,"},{"text":" ","type":"text"},{"text":"the result builder builds the body of the getter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"On a parameter in a function declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of a closure"},{"text":" ","type":"text"},{"type":"text","text":"that’s passed as the corresponding argument."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying a result builder attribute doesn’t impact ABI compatibility."},{"type":"text","text":" "},{"text":"Applying a result builder attribute to a parameter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"makes that attribute part of the function’s interface,"},{"type":"text","text":" "},{"text":"which can affect source compatibility.","type":"text"}]},{"level":3,"text":"requires_stored_property_inits","type":"heading","anchor":"requiresstoredpropertyinits"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class declaration","type":"text"},{"type":"text","text":" "},{"text":"to require all stored properties within the class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide default values as part of their definitions."},{"text":" ","type":"text"},{"text":"This attribute is inferred for any class","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that inherits from "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":"."}]},{"text":"testable","anchor":"testable","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to an ","type":"text"},{"code":"import","type":"codeVoice"},{"type":"text","text":" declaration"},{"text":" ","type":"text"},{"type":"text","text":"to import that module with changes to its access control"},{"type":"text","text":" "},{"text":"that simplify testing the module’s code.","type":"text"},{"text":" ","type":"text"},{"text":"Entities in the imported module","type":"text"},{"type":"text","text":" "},{"text":"that are marked with the ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":" access-level modifier","type":"text"},{"text":" ","type":"text"},{"text":"are imported as if they were declared with the ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"type":"text","text":"Classes and class members"},{"type":"text","text":" "},{"type":"text","text":"that are marked with the "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" or "},{"code":"public","type":"codeVoice"},{"type":"text","text":" access-level modifier"},{"type":"text","text":" "},{"type":"text","text":"are imported as if they were declared with the "},{"code":"open","type":"codeVoice"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"text":"The imported module must be compiled with testing enabled.","type":"text"}]},{"type":"heading","level":3,"text":"UIApplicationMain","anchor":"UIApplicationMain"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"text","text":" "},{"text":"This attribute is deprecated;","type":"text"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","type":"reference","isActive":true},{"text":" attribute instead.","type":"text"},{"type":"text","text":" "},{"text":"In Swift 6,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using this attribute will be an error."}]}],"type":"aside","name":"Deprecated","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class"},{"type":"text","text":" "},{"text":"to indicate that it’s the app delegate.","type":"text"},{"type":"text","text":" "},{"text":"Using this attribute is equivalent to calling the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"UIApplicationMain"},{"text":" function and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"passing this class’s name as the name of the delegate class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t use this attribute,"},{"type":"text","text":" "},{"type":"text","text":"supply a "},{"type":"codeVoice","code":"main.swift"},{"text":" file with code at the top level","type":"text"},{"type":"text","text":" "},{"text":"that calls the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","isActive":true,"type":"reference"},{"type":"text","text":" function."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"if your app uses a custom subclass of ","type":"text"},{"type":"codeVoice","code":"UIApplication"},{"type":"text","text":" "},{"text":"as its principal class,","type":"text"},{"type":"text","text":" "},{"text":"call the ","type":"text"},{"code":"UIApplicationMain(_:_:_:_:)","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instead of using this attribute."}]},{"type":"paragraph","inlineContent":[{"text":"The Swift code you compile to make an executable","type":"text"},{"text":" ","type":"text"},{"text":"can contain at most one top-level entry point,","type":"text"},{"type":"text","text":" "},{"text":"as discussed in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","isActive":true},{"text":".","type":"text"}]},{"anchor":"unchecked","text":"unchecked","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Apply this attribute to a protocol type"},{"text":" ","type":"text"},{"type":"text","text":"as part of a type declaration’s list of adopted protocols"},{"text":" ","type":"text"},{"text":"to turn off enforcement of that protocol’s requirements.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The only supported protocol is "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"usableFromInline","anchor":"usableFromInline","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"text":" ","type":"text"},{"type":"text","text":"function, method, computed property, subscript,"},{"text":" ","type":"text"},{"type":"text","text":"initializer, or deinitializer declaration"},{"type":"text","text":" "},{"text":"to allow that symbol to be used in inlinable code","type":"text"},{"type":"text","text":" "},{"text":"that’s defined in the same module as the declaration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The declaration must have the "},{"code":"internal","type":"codeVoice"},{"text":" access-level modifier.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A structure or class marked "},{"type":"codeVoice","code":"usableFromInline"},{"text":" ","type":"text"},{"text":"can use only types that are public or ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"text":" for its properties.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An enumeration marked "},{"type":"codeVoice","code":"usableFromInline"},{"text":" ","type":"text"},{"type":"text","text":"can use only types that are public or "},{"code":"usableFromInline","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"for the raw values and associated values of its cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the "},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier,"},{"type":"text","text":" "},{"type":"text","text":"this attribute"},{"type":"text","text":" "},{"type":"text","text":"exposes the declaration as part of the module’s public interface."},{"type":"text","text":" "},{"type":"text","text":"Unlike "},{"type":"codeVoice","code":"public"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the compiler doesn’t allow declarations marked with "},{"code":"usableFromInline","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to be referenced by name in code outside the module,"},{"type":"text","text":" "},{"type":"text","text":"even though the declaration’s symbol is exported."},{"type":"text","text":" "},{"text":"However, code outside the module might still be able","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to interact with the declaration’s symbol by using runtime behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declarations marked with the "},{"code":"inlinable","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"are implicitly usable from inlinable code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Although either "},{"type":"codeVoice","code":"inlinable"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"text":" ","type":"text"},{"text":"can be applied to ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":" declarations,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"applying both attributes is an error."}]},{"anchor":"warnunqualifiedaccess","type":"heading","text":"warn_unqualified_access","level":3},{"inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"text":" ","type":"text"},{"type":"text","text":"top-level function, instance method, or class or static method"},{"text":" ","type":"text"},{"type":"text","text":"to trigger warnings when that function or method is used"},{"text":" ","type":"text"},{"text":"without a preceding qualifier,","type":"text"},{"type":"text","text":" "},{"text":"such as a module name, type name, or instance variable or constant.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Use this attribute to help discourage ambiguity between functions"},{"type":"text","text":" "},{"type":"text","text":"with the same name that are accessible from the same scope."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"the Swift standard library includes both a top-level"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"function and a"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","type":"reference"},{"type":"text","text":" "},{"text":"method for sequences with comparable elements.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The sequence method is declared with the "},{"type":"codeVoice","code":"warn_unqualified_access"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to help reduce confusion"},{"text":" ","type":"text"},{"type":"text","text":"when attempting to use one or the other from within a "},{"code":"Sequence","type":"codeVoice"},{"text":" extension.","type":"text"}]},{"anchor":"Declaration-Attributes-Used-by-Interface-Builder","level":3,"type":"heading","text":"Declaration Attributes Used by Interface Builder"},{"type":"paragraph","inlineContent":[{"text":"Interface Builder attributes are declaration attributes","type":"text"},{"text":" ","type":"text"},{"text":"used by Interface Builder to synchronize with Xcode.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift provides the following Interface Builder attributes:"},{"type":"text","text":" "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"code":"IBSegueAction","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"IBDesignable","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"IBInspectable"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These attributes are conceptually the same as their"},{"text":" ","type":"text"},{"type":"text","text":"Objective-C counterparts."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You apply the "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"IBInspectable"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to property declarations of a class."},{"type":"text","text":" "},{"type":"text","text":"You apply the "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":" and "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"to method declarations of a class","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"code":"IBDesignable","type":"codeVoice"},{"type":"text","text":" attribute to class declarations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"code":"IBAction","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"code":"IBOutlet","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"IBDesignable"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"IBInspectable"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"also implies the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"type":"heading","text":"Type Attributes","level":2,"anchor":"Type-Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply type attributes to types only."}]},{"anchor":"autoclosure","level":3,"type":"heading","text":"autoclosure"},{"inlineContent":[{"text":"Apply this attribute to delay the evaluation of an expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by automatically wrapping that expression in a closure with no arguments."},{"text":" ","type":"text"},{"text":"You apply it to a parameter’s type in a function or method declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for a parameter whose type is a function type that takes no arguments"},{"type":"text","text":" "},{"type":"text","text":"and that returns a value of the type of the expression."},{"text":" ","type":"text"},{"type":"text","text":"For an example of how to use the "},{"code":"autoclosure","type":"codeVoice"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"convention","text":"convention","type":"heading"},{"inlineContent":[{"text":"Apply this attribute to the type of a function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate its calling conventions."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"convention"},{"text":" attribute always appears with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one of the following arguments:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swift"},{"type":"text","text":" argument indicates a Swift function reference."},{"type":"text","text":" "},{"text":"This is the standard calling convention for function values in Swift.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"block","type":"codeVoice"},{"text":" argument indicates an Objective-C compatible block reference.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The function value is represented as a reference to the block object,"},{"type":"text","text":" "},{"type":"text","text":"which is an "},{"code":"id","type":"codeVoice"},{"type":"text","text":"-compatible Objective-C object that embeds its invocation"},{"type":"text","text":" "},{"text":"function within the object.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The invocation function uses the C calling convention."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"c"},{"type":"text","text":" argument indicates a C function reference."},{"text":" ","type":"text"},{"type":"text","text":"The function value carries no context and uses the C calling convention."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"With a few exceptions,"},{"type":"text","text":" "},{"type":"text","text":"a function of any calling convention can be used"},{"type":"text","text":" "},{"text":"when a function any other calling convention is needed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A nongeneric global function,"},{"type":"text","text":" "},{"type":"text","text":"a local function that doesn’t capture any local variables,"},{"type":"text","text":" "},{"text":"or a closure that doesn’t capture any local variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be converted to the C calling convention."},{"type":"text","text":" "},{"text":"Other Swift functions can’t be converted to the C calling convention.","type":"text"},{"type":"text","text":" "},{"text":"A function with the Objective-C block calling convention","type":"text"},{"type":"text","text":" "},{"text":"can’t be converted to the C calling convention.","type":"text"}],"type":"paragraph"},{"anchor":"escaping","type":"heading","level":3,"text":"escaping"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a parameter’s type in a function or method declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the parameter’s value can be stored for later execution."},{"type":"text","text":" "},{"type":"text","text":"This means that the value is allowed to outlive the lifetime of the call."},{"type":"text","text":" "},{"text":"Function type parameters with the ","type":"text"},{"code":"escaping","type":"codeVoice"},{"type":"text","text":" type attribute"},{"text":" ","type":"text"},{"type":"text","text":"require explicit use of "},{"type":"codeVoice","code":"self."},{"type":"text","text":" for properties or methods."},{"type":"text","text":" "},{"text":"For an example of how to use the ","type":"text"},{"code":"escaping","type":"codeVoice"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","type":"reference","isActive":true},{"text":".","type":"text"}]},{"level":3,"text":"Sendable","type":"heading","anchor":"Sendable"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to the type of a function","type":"text"},{"type":"text","text":" "},{"text":"to indicate that the function or closure is sendable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Applying this attribute to a function type"},{"text":" ","type":"text"},{"text":"has the same meaning as conforming a non–function type","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"overridingTitleInlineContent":[{"code":"Sendable","type":"codeVoice"}],"isActive":true,"overridingTitle":"Sendable","type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This attribute is inferred on functions and closures"},{"type":"text","text":" "},{"type":"text","text":"if the function or closure is used in a context"},{"type":"text","text":" "},{"type":"text","text":"that expects a sendable value,"},{"type":"text","text":" "},{"type":"text","text":"and the function or closure satisfies the requirements to be sendable."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sendable function type"},{"type":"text","text":" "},{"type":"text","text":"is a subtype of the corresponding nonsendable function type."}]},{"level":2,"type":"heading","text":"Switch Case Attributes","anchor":"Switch-Case-Attributes"},{"type":"paragraph","inlineContent":[{"text":"You can apply switch case attributes to switch cases only.","type":"text"}]},{"anchor":"unknown","type":"heading","level":3,"text":"unknown"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a switch case"},{"text":" ","type":"text"},{"text":"to indicate that it isn’t expected to be matched","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by any case of the enumeration that’s known"},{"text":" ","type":"text"},{"type":"text","text":"at the time the code is compiled."},{"type":"text","text":" "},{"text":"For an example of how to use the ","type":"text"},{"type":"codeVoice","code":"unknown"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"attribute"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"@","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute-name"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"attribute-argument-clause"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"attribute-name","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"attribute-argument-clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"attributes"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"attributes","type":"text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"balanced-tokens"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"balanced-token"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"balanced-tokens","type":"text"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-token"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"balanced-tokens","type":"text"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"balanced-token"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"[","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"balanced-tokens","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"]"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"balanced-token"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"{","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"}","type":"codeVoice"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-token"}]},{"type":"text","text":" → Any identifier, keyword, literal, or operator "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-token"}]},{"text":" → Any punctuation except  ","type":"text"},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":",  "},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"type":"text","text":",  "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"["}]},{"text":",  ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"]"}],"type":"strong"},{"type":"text","text":",  "},{"type":"strong","inlineContent":[{"code":"{","type":"codeVoice"}]},{"type":"text","text":", or  "},{"inlineContent":[{"type":"codeVoice","code":"}"}],"type":"strong"}]}],"style":"note","name":"Grammar of an attribute"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Learn more about using "},{"identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Beta Software"}],"kind":"content"}],"references":{"https://developer.apple.com/documentation/swift/writablekeypath":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","url":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","type":"link","title":"WritableKeyPath","titleInlineContent":[{"code":"WritableKeyPath","type":"codeVoice"}]},"https://developer.apple.com/documentation/swift/sendable":{"title":"Sendable","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Sendable"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#inlinable":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable","title":"inlinable","url":"\/documentation\/the-swift-programming-language\/attributes#inlinable","kind":"section","abstract":[]},"https://developer.apple.com/documentation/swift/expressiblebyarrayliteral":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","title":"ExpressibleByArrayLiteral","titleInlineContent":[{"code":"ExpressibleByArrayLiteral","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral"},"https://developer.apple.com/documentation/swift/referencewritablekeypath":{"title":"ReferenceWritableKeyPath","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ReferenceWritableKeyPath"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath"},"https://help.apple.com/xcode/mac/current/#/dev04b3a04ba":{"type":"link","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","title":"Xcode Help","titleInlineContent":[{"text":"Xcode Help","type":"text"}],"url":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"title":"main","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#main","kind":"section","abstract":[]},"https://developer.apple.com/documentation/swift/sequence/1641174-min":{"title":"min()","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","type":"link","titleInlineContent":[{"type":"codeVoice","code":"min()"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","title":"Escaping Closures","url":"\/documentation\/the-swift-programming-language\/closures#Escaping-Closures","kind":"section","abstract":[]},"https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","title":"UIApplicationMain(_:_:_:_:)","titleInlineContent":[{"code":"UIApplicationMain(_:_:_:_:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210":{"title":"Programming with Objective-C","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","type":"link","titleInlineContent":[{"type":"text","text":"Programming with Objective-C"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"abstract":[],"title":"Autoclosures","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","kind":"section"},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","title":"ExpressibleByDictionaryLiteral","titleInlineContent":[{"code":"ExpressibleByDictionaryLiteral","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"},"https://developer.apple.com/documentation/swift/keypath":{"title":"KeyPath","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","type":"link","titleInlineContent":[{"type":"codeVoice","code":"KeyPath"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/keypath"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#propertyWrapper":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper","title":"propertyWrapper","url":"\/documentation\/the-swift-programming-language\/attributes#propertyWrapper","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Top-Level-Code":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","title":"Top-Level Code","url":"\/documentation\/the-swift-programming-language\/declarations#Top-Level-Code","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","title":"Function Type","url":"\/documentation\/the-swift-programming-language\/types#Function-Type","kind":"section","abstract":[]},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral/2294108-key":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","title":"Key","titleInlineContent":[{"code":"Key","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key"},"https://developer.apple.com/documentation/swift/keyvaluepairs":{"title":"KeyValuePairs","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","type":"link","titleInlineContent":[{"type":"codeVoice","code":"KeyValuePairs"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs"},"https://developer.apple.com/documentation/foundation/1395135-nsclassfromstring":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","title":"NSClassFromString(_:)","titleInlineContent":[{"code":"NSClassFromString(_:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html#//apple_ref/doc/uid/TP40011210-CH10-SW1":{"title":"Conventions","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","type":"link","titleInlineContent":[{"type":"text","text":"Conventions"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (6.0 beta)","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","title":"Switching Over Future Enumeration Cases","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Macro-Expansion-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Macro-Expansion-Expression","title":"Macro-Expansion Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Macro-Expansion-Expression","kind":"section","abstract":[]},"https://developer.apple.com/documentation/swift/1538339-min/":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","title":"min(_:_:)","titleInlineContent":[{"code":"min(_:_:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/"},"https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_swift_into_objective-c":{"title":"Importing Swift into Objective-C","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","type":"link","titleInlineContent":[{"type":"text","text":"Importing Swift into Objective-C"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c"},"https://developer.apple.com/support/beta-software/":{"type":"link","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","title":"Apple’s beta software","titleInlineContent":[{"text":"Apple’s beta software","type":"text"}],"url":"https:\/\/developer.apple.com\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Result-Builders":{"title":"Result Builders","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Result-Builders","kind":"section","abstract":[]},"https://developer.apple.com/documentation/swift/expressiblebystringliteral":{"title":"ExpressibleByStringLiteral","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ExpressibleByStringLiteral"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"}}}