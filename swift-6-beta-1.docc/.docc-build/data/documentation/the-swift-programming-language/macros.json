{"abstract":[{"text":"Use macros to generate code at compile time.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"kind":"article","metadata":{"title":"Macros"},"primaryContentSections":[{"content":[{"inlineContent":[{"text":"Macros transform your source code when you compile it,","type":"text"},{"type":"text","text":" "},{"text":"letting you avoid writing repetitive code by hand.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"During compilation,"},{"type":"text","text":" "},{"type":"text","text":"Swift expands any macros in your code before building your code as usual."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"macro-expansion","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanding a macro is always an additive operation:"},{"type":"text","text":" "},{"type":"text","text":"Macros add new code,"},{"type":"text","text":" "},{"type":"text","text":"but they never delete or modify existing code."}]},{"inlineContent":[{"text":"Both the input to a macro and the output of macro expansion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are checked to ensure they’re syntactically valid Swift code."},{"text":" ","type":"text"},{"type":"text","text":"Likewise, the values you pass to a macro"},{"type":"text","text":" "},{"text":"and the values in code generated by a macro","type":"text"},{"type":"text","text":" "},{"text":"are checked to ensure they have the correct types.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In addition,"},{"text":" ","type":"text"},{"text":"if the macro’s implementation encounters an error when expanding that macro,","type":"text"},{"type":"text","text":" "},{"text":"the compiler treats this as a compilation error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These guarantees make it easier to reason about code that uses macros,"},{"text":" ","type":"text"},{"type":"text","text":"and they make it easier to identify issues"},{"type":"text","text":" "},{"type":"text","text":"like using a macro incorrectly"},{"type":"text","text":" "},{"type":"text","text":"or a macro implementation that has a bug."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift has two kinds of macros:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Freestanding macros"}]},{"type":"text","text":" appear on their own,"},{"text":" ","type":"text"},{"type":"text","text":"without being attached to a declaration."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Attached macros"}],"type":"emphasis"},{"type":"text","text":" modify the declaration that they’re attached to."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You call attached and freestanding macros slightly differently,"},{"type":"text","text":" "},{"text":"but they both follow the same model for macro expansion,","type":"text"},{"type":"text","text":" "},{"text":"and you implement them both using the same approach.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The following sections describe both kinds of macros in more detail."}]},{"anchor":"Freestanding-Macros","text":"Freestanding Macros","type":"heading","level":2},{"inlineContent":[{"text":"To call a freestanding macro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you write a number sign ("},{"type":"codeVoice","code":"#"},{"type":"text","text":") before its name,"},{"text":" ","type":"text"},{"text":"and you write any arguments to the macro in parentheses after its name.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["func myFunction() {","    print(\"Currently running \\(#function)\")","    #warning(\"Something's wrong\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the first line,"},{"type":"text","text":" "},{"type":"codeVoice","code":"#function"},{"type":"text","text":" calls the "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function()","type":"reference"},{"type":"text","text":" macro from the Swift standard library."},{"text":" ","type":"text"},{"type":"text","text":"When you compile this code,"},{"type":"text","text":" "},{"type":"text","text":"Swift calls that macro’s implementation,"},{"type":"text","text":" "},{"text":"which replaces ","type":"text"},{"code":"#function","type":"codeVoice"},{"type":"text","text":" with the name of the current function."},{"type":"text","text":" "},{"type":"text","text":"When you run this code and call "},{"type":"codeVoice","code":"myFunction()"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"it prints “Currently running myFunction()”.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the second line,"},{"type":"text","text":" "},{"type":"codeVoice","code":"#warning"},{"type":"text","text":" calls the "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)"},{"text":" macro from the Swift standard library","type":"text"},{"text":" ","type":"text"},{"text":"to produce a custom compile-time warning.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Freestanding macros can produce a value, like "},{"type":"codeVoice","code":"#function"},{"type":"text","text":" does,"},{"type":"text","text":" "},{"text":"or they can perform an action at compile time, like ","type":"text"},{"type":"codeVoice","code":"#warning"},{"text":" does.","type":"text"}],"type":"paragraph"},{"anchor":"Attached-Macros","text":"Attached Macros","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To call an attached macro,"},{"text":" ","type":"text"},{"text":"you write an at sign (","type":"text"},{"code":"@","type":"codeVoice"},{"text":") before its name,","type":"text"},{"type":"text","text":" "},{"text":"and you write any arguments to the macro in parentheses after its name.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Attached macros modify the declaration that they’re attached to.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"They add code to that declaration,"},{"text":" ","type":"text"},{"text":"like defining a new method or adding conformance to a protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, consider the following code","type":"text"},{"type":"text","text":" "},{"text":"that doesn’t use macros:","type":"text"}]},{"syntax":"swift","code":["struct SundaeToppings: OptionSet {","    let rawValue: Int","    static let nuts = SundaeToppings(rawValue: 1 << 0)","    static let cherry = SundaeToppings(rawValue: 1 << 1)","    static let fudge = SundaeToppings(rawValue: 1 << 2)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In this code,","type":"text"},{"type":"text","text":" "},{"text":"each of the options in the ","type":"text"},{"type":"codeVoice","code":"SundaeToppings"},{"text":" option set","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"includes a call to the initializer,"},{"text":" ","type":"text"},{"text":"which is repetitive and manual.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It would be easy to make a mistake when adding a new option,"},{"text":" ","type":"text"},{"type":"text","text":"like typing the wrong number at the end of the line."}]},{"inlineContent":[{"type":"text","text":"Here’s a version of this code that uses a macro instead:"}],"type":"paragraph"},{"code":["@OptionSet<Int>","struct SundaeToppings {","    private enum Options: Int {","        case nuts","        case cherry","        case fudge","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This version of ","type":"text"},{"type":"codeVoice","code":"SundaeToppings"},{"text":" calls an ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"text":" macro.","type":"text"},{"type":"text","text":" "},{"text":"The macro reads the list of cases in the private enumeration,","type":"text"},{"type":"text","text":" "},{"text":"generates the list of constants for each option,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and adds a conformance to the "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For comparison,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"here’s what the expanded version of the "},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro looks like."},{"type":"text","text":" "},{"text":"You don’t write this code,","type":"text"},{"type":"text","text":" "},{"text":"and you would see it only if you specifically asked Swift","type":"text"},{"type":"text","text":" "},{"text":"to show the macro’s expansion.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct SundaeToppings {","    private enum Options: Int {","        case nuts","        case cherry","        case fudge","    }","","    typealias RawValue = Int","    var rawValue: RawValue","    init() { self.rawValue = 0 }","    init(rawValue: RawValue) { self.rawValue = rawValue }","    static let nuts: Self = Self(rawValue: 1 << Options.nuts.rawValue)","    static let cherry: Self = Self(rawValue: 1 << Options.cherry.rawValue)","    static let fudge: Self = Self(rawValue: 1 << Options.fudge.rawValue)","}","extension SundaeToppings: OptionSet { }"]},{"inlineContent":[{"type":"text","text":"All of the code after the private enumeration"},{"type":"text","text":" "},{"type":"text","text":"comes from the "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro."},{"type":"text","text":" "},{"type":"text","text":"The version of "},{"type":"codeVoice","code":"SundaeToppings"},{"type":"text","text":" "},{"type":"text","text":"that uses a macro to generate all of the static variables"},{"type":"text","text":" "},{"type":"text","text":"is easier to read and easier to maintain"},{"type":"text","text":" "},{"text":"than the manually coded version, earlier.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Macro-Declarations","type":"heading","text":"Macro Declarations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In most Swift code,"},{"type":"text","text":" "},{"text":"when you implement a symbol, like a function or type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"there’s no separate declaration."},{"type":"text","text":" "},{"type":"text","text":"However, for macros, the declaration and implementation are separate."},{"text":" ","type":"text"},{"type":"text","text":"A macro’s declaration contains its name,"},{"type":"text","text":" "},{"text":"the parameters it takes,","type":"text"},{"type":"text","text":" "},{"text":"where it can be used,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and what kind of code it generates."},{"text":" ","type":"text"},{"type":"text","text":"A macro’s implementation contains the code"},{"type":"text","text":" "},{"text":"that expands the macro by generating Swift code.","type":"text"}]},{"inlineContent":[{"text":"You introduce a macro declaration with the ","type":"text"},{"type":"codeVoice","code":"macro"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"here’s part of the declaration for","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro used in the previous example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"]},{"type":"paragraph","inlineContent":[{"text":"The first line","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specifies the macro’s name and its arguments —"},{"text":" ","type":"text"},{"text":"the name is ","type":"text"},{"type":"codeVoice","code":"OptionSet"},{"text":", and it doesn’t take any arguments.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The second line"},{"type":"text","text":" "},{"text":"uses the ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)","isActive":true},{"type":"text","text":" macro from the Swift standard library"},{"type":"text","text":" "},{"type":"text","text":"to tell Swift where the macro’s implementation is located."},{"type":"text","text":" "},{"type":"text","text":"In this case,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"SwiftMacros"},{"type":"text","text":" module"},{"type":"text","text":" "},{"text":"contains a type named ","type":"text"},{"type":"codeVoice","code":"OptionSetMacro"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which implements the "},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"OptionSet"},{"text":" is an attached macro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its name uses upper camel case,"},{"text":" ","type":"text"},{"text":"like the names for structures and classes.","type":"text"},{"text":" ","type":"text"},{"text":"Freestanding macros have lower camel case names,","type":"text"},{"text":" ","type":"text"},{"text":"like the names for variables and functions.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"text","text":" "},{"text":"Macros are always declared as ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Because the code that declares a macro","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is in a different module from code that uses that macro,"},{"type":"text","text":" "},{"text":"there isn’t anywhere you could apply a nonpublic macro.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"A macro declaration defines the macro’s ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"roles","type":"text"}]},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"the places in source code where that macro can be called,"},{"type":"text","text":" "},{"type":"text","text":"and the kinds of code the macro can generate."},{"type":"text","text":" "},{"type":"text","text":"Every macro has one or more roles,"},{"text":" ","type":"text"},{"type":"text","text":"which you write as part of the attributes"},{"type":"text","text":" "},{"text":"at the beginning of the macro declaration.","type":"text"},{"text":" ","type":"text"},{"text":"Here’s a bit more of the declaration for ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"including the attributes for its roles:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@attached(member)","@attached(extension, conformances: OptionSet)","public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@attached","type":"codeVoice"},{"type":"text","text":" attribute appears twice in this declaration,"},{"text":" ","type":"text"},{"text":"once for each macro role.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The first use, "},{"code":"@attached(member)","type":"codeVoice"},{"type":"text","text":", indicates that the macro"},{"type":"text","text":" "},{"text":"adds new members to the type you apply it to.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"@OptionSet","type":"codeVoice"},{"text":" macro adds an ","type":"text"},{"type":"codeVoice","code":"init(rawValue:)"},{"type":"text","text":" initializer"},{"text":" ","type":"text"},{"type":"text","text":"that’s required by the "},{"type":"codeVoice","code":"OptionSet"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"text":"as well as some additional members.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The second use, "},{"code":"@attached(extension, conformances: OptionSet)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"tells you that ","type":"text"},{"code":"@OptionSet","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"adds conformance to the "},{"code":"OptionSet","type":"codeVoice"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"text":" macro","type":"text"},{"type":"text","text":" "},{"type":"text","text":"extends the type that you apply the macro to,"},{"type":"text","text":" "},{"text":"to add conformance to the ","type":"text"},{"code":"OptionSet","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For a freestanding macro,","type":"text"},{"type":"text","text":" "},{"text":"you write the ","type":"text"},{"type":"codeVoice","code":"@freestanding"},{"text":" attribute to specify its role:","type":"text"}]},{"syntax":"swift","code":["@freestanding(expression)","public macro line<T: ExpressibleByIntegerLiteral>() -> T =","        \/* ... location of the macro implementation... *\/"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"code":"#line","type":"codeVoice"},{"text":" macro above has the ","type":"text"},{"type":"codeVoice","code":"expression"},{"type":"text","text":" role."},{"text":" ","type":"text"},{"text":"An expression macro produces a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or performs a compile-time action like generating a warning."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the macro’s role,"},{"text":" ","type":"text"},{"text":"a macro’s declaration provides information about","type":"text"},{"type":"text","text":" "},{"text":"the names of the symbols that the macro generates.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When a macro declaration provides a list of names,"},{"type":"text","text":" "},{"type":"text","text":"it’s guaranteed to produce only declarations that use those names,"},{"text":" ","type":"text"},{"type":"text","text":"which helps you understand and debug the generated code."},{"type":"text","text":" "},{"type":"text","text":"Here’s the full declaration of "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["@attached(member, names: named(RawValue), named(rawValue),","        named(`init`), arbitrary)","@attached(extension, conformances: OptionSet)","public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In the declaration above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@attached(member)"},{"type":"text","text":" macro includes arguments after the "},{"type":"codeVoice","code":"named:"},{"type":"text","text":" label"},{"text":" ","type":"text"},{"type":"text","text":"for each of the symbols that the "},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro generates."},{"type":"text","text":" "},{"text":"The macro adds declarations for symbols named","type":"text"},{"text":" ","type":"text"},{"code":"RawValue","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"rawValue"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"init"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because those names are known ahead of time,"},{"type":"text","text":" "},{"type":"text","text":"the macro declaration lists them explicitly."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro declaration also includes "},{"code":"arbitrary","type":"codeVoice"},{"text":" after the list of names,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"allowing the macro to generate declarations"},{"type":"text","text":" "},{"type":"text","text":"whose names aren’t known until you use the macro."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro is applied to the "},{"code":"SundaeToppings","type":"codeVoice"},{"text":" above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it generates type properties that correspond to the enumeration cases,"},{"type":"text","text":" "},{"type":"codeVoice","code":"nuts"},{"type":"text","text":", "},{"type":"codeVoice","code":"cherry"},{"text":", and ","type":"text"},{"code":"fudge","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"type":"text","text":"including a full list of macro roles,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":".","type":"text"}]},{"anchor":"Macro-Expansion","level":2,"text":"Macro Expansion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When building Swift code that uses macros,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler calls the macros’ implementation to expand them."}]},{"inlineContent":[{"identifier":"macro-expansion-full","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"Specifically, Swift expands macros in the following way:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The compiler reads the code,","type":"text"},{"text":" ","type":"text"},{"text":"creating an in-memory representation of the syntax.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler sends part of the in-memory representation"},{"text":" ","type":"text"},{"text":"to the macro implementation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which expands the macro."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The compiler replaces the macro call with its expanded form.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"The compiler continues with compilation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using the expanded source code."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"To go through the specific steps, consider the following:","type":"text"}],"type":"paragraph"},{"code":["let magicNumber = #fourCharacterCode(\"ABCD\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" macro takes a string that’s four characters long","type":"text"},{"type":"text","text":" "},{"text":"and returns an unsigned 32-bit integer","type":"text"},{"text":" ","type":"text"},{"text":"that corresponds to the ASCII values in the string joined together.","type":"text"},{"type":"text","text":" "},{"text":"Some file formats use integers like this to identify data","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because they’re compact but still readable in a debugger."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementing-a-Macro","isActive":true},{"type":"text","text":" section below"},{"type":"text","text":" "},{"text":"shows how to implement this macro.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To expand the macros in the code above,"},{"type":"text","text":" "},{"text":"the compiler reads the Swift file","type":"text"},{"type":"text","text":" "},{"text":"and creates an in-memory representation of that code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"known as an "},{"type":"emphasis","inlineContent":[{"text":"abstract syntax tree","type":"text"}]},{"text":", or AST.","type":"text"},{"text":" ","type":"text"},{"text":"The AST makes the code’s structure explicit,","type":"text"},{"type":"text","text":" "},{"text":"which makes it easier to write code that interacts with that structure —","type":"text"},{"text":" ","type":"text"},{"text":"like a compiler or a macro implementation.","type":"text"},{"text":" ","type":"text"},{"text":"Here’s a representation of the AST for the code above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"slightly simplified by omitting some extra detail:"}]},{"type":"paragraph","inlineContent":[{"identifier":"macro-ast-original","type":"image"}]},{"inlineContent":[{"text":"The diagram above shows how the structure of this code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is represented in memory."},{"text":" ","type":"text"},{"text":"Each element in the AST","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"corresponds to a part of the source code."},{"text":" ","type":"text"},{"text":"The “Constant declaration” AST element","type":"text"},{"type":"text","text":" "},{"text":"has two child elements under it,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which represent the two parts of a constant declaration:"},{"text":" ","type":"text"},{"type":"text","text":"its name and its value."},{"text":" ","type":"text"},{"type":"text","text":"The “Macro call” element has child elements"},{"type":"text","text":" "},{"type":"text","text":"that represent the macro’s name"},{"type":"text","text":" "},{"type":"text","text":"and the list of arguments being passed to the macro."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As part of constructing this AST,"},{"text":" ","type":"text"},{"text":"the compiler checks that the source code is valid Swift.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, "},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" takes a single argument,","type":"text"},{"text":" ","type":"text"},{"text":"which must be a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you tried to pass an integer argument,"},{"type":"text","text":" "},{"text":"or forgot the quotation mark (","type":"text"},{"code":"\"","type":"codeVoice"},{"text":") at the end of the string literal,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you’d get an error at this point in the process."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler finds the places in the code where you call a macro,"},{"text":" ","type":"text"},{"type":"text","text":"and loads the external binary that implements those macros."},{"type":"text","text":" "},{"type":"text","text":"For each macro call,"},{"type":"text","text":" "},{"text":"the compiler passes part of the AST to that macro’s implementation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s a representation of that partial AST:"}]},{"inlineContent":[{"identifier":"macro-ast-input","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The implementation of the ","type":"text"},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reads this partial AST as its input when expanding the macro."},{"type":"text","text":" "},{"type":"text","text":"A macro’s implementation"},{"type":"text","text":" "},{"type":"text","text":"operates only on the partial AST that it receives as its input,"},{"text":" ","type":"text"},{"text":"meaning a macro always expands the same way","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"regardless of what code comes before and after it."},{"text":" ","type":"text"},{"text":"This limitation helps make macro expansion easier to understand,","type":"text"},{"type":"text","text":" "},{"text":"and helps your code build faster","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because Swift can avoid expanding macros that haven’t changed."}]},{"inlineContent":[{"type":"text","text":"Swift helps macro authors avoid accidentally reading other input"},{"type":"text","text":" "},{"type":"text","text":"by restricting the code that implements macros:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The AST passed to a macro implementation"},{"type":"text","text":" "},{"text":"contains only the AST elements that represent the macro,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not any of the code that comes before or after it."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro implementation runs in a sandboxed environment"},{"type":"text","text":" "},{"text":"that prevents it from accessing the file system or the network.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"In addition to these safeguards,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the macro’s author is responsible for not reading or modifying anything"},{"type":"text","text":" "},{"text":"outside of the macro’s inputs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, a macro’s expansion must not depend on the current time of day."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The implementation of ","type":"text"},{"type":"codeVoice","code":"#fourCharacterCode"},{"type":"text","text":" "},{"text":"generates a new AST containing the expanded code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Here’s what that code returns to the compiler:"}]},{"type":"paragraph","inlineContent":[{"identifier":"macro-ast-output","type":"image"}]},{"inlineContent":[{"type":"text","text":"When the compiler receives this expansion,"},{"type":"text","text":" "},{"text":"it replaces the AST element that contains the macro call","type":"text"},{"text":" ","type":"text"},{"text":"with the element that contains the macro’s expansion.","type":"text"},{"type":"text","text":" "},{"text":"After macro expansion,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the compiler checks again to ensure"},{"type":"text","text":" "},{"type":"text","text":"the program is still syntactically valid Swift"},{"text":" ","type":"text"},{"text":"and all the types are correct.","type":"text"},{"type":"text","text":" "},{"text":"That produces a final AST that can be compiled as usual:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"macro-ast-result"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This AST corresponds to Swift code like this:","type":"text"}]},{"code":["let magicNumber = 1145258561 as UInt32"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In this example, the input source code has only one macro,","type":"text"},{"type":"text","text":" "},{"text":"but a real program could have several instances of the same macro","type":"text"},{"type":"text","text":" "},{"text":"and several calls to different macros.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The compiler expands macros one at a time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If one macro appears inside another,"},{"type":"text","text":" "},{"type":"text","text":"the outer macro is expanded first —"},{"type":"text","text":" "},{"type":"text","text":"this lets the outer macro modify the inner macro before it’s expanded."}]},{"text":"Implementing a Macro","anchor":"Implementing-a-Macro","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To implement a macro, you make two components:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A type that performs the macro expansion,"},{"type":"text","text":" "},{"type":"text","text":"and a library that declares the macro to expose it as API."},{"text":" ","type":"text"},{"type":"text","text":"These parts are built separately from code that uses the macro,"},{"text":" ","type":"text"},{"text":"even if you’re developing the macro and its clients together,","type":"text"},{"text":" ","type":"text"},{"text":"because the macro implementation runs","type":"text"},{"text":" ","type":"text"},{"text":"as part of building the macro’s clients.","type":"text"}]},{"inlineContent":[{"type":"text","text":"To create a new macro using Swift Package Manager,"},{"type":"text","text":" "},{"text":"run ","type":"text"},{"code":"swift package init --type macro","type":"codeVoice"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this creates several files,"},{"type":"text","text":" "},{"type":"text","text":"including a template for a macro implementation and declaration."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To add macros to an existing project,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"edit the beginning of your "},{"code":"Package.swift","type":"codeVoice"},{"text":" file as follows:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Set a Swift tools version of 5.9 or later in the "},{"code":"swift-tools-version","type":"codeVoice"},{"type":"text","text":" comment."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Import the ","type":"text"},{"type":"codeVoice","code":"CompilerPluginSupport"},{"text":" module.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Include macOS 10.15 as a minimum deployment target in the "},{"type":"codeVoice","code":"platforms"},{"type":"text","text":" list."}]}]}]},{"inlineContent":[{"type":"text","text":"The code below shows the beginning of an example "},{"code":"Package.swift","type":"codeVoice"},{"text":" file.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ swift-tools-version: 5.9","","import PackageDescription","import CompilerPluginSupport","","let package = Package(","    name: \"MyPackage\",","    platforms: [ .iOS(.v17), .macOS(.v13)],","    \/\/ ...",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, add a target for the macro implementation"},{"type":"text","text":" "},{"text":"and a target for the macro library","type":"text"},{"type":"text","text":" "},{"text":"to your existing ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":" file.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"you can add something like the following,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"changing the names to match your project:"}]},{"code":["targets: [","    \/\/ Macro implementation that performs the source transformations.","    .macro(","        name: \"MyProjectMacros\",","        dependencies: [","            .product(name: \"SwiftSyntaxMacros\", package: \"swift-syntax\"),","            .product(name: \"SwiftCompilerPlugin\", package: \"swift-syntax\")","        ]","    ),","","    \/\/ Library that exposes a macro as part of its API.","    .target(name: \"MyProject\", dependencies: [\"MyProjectMacros\"]),","]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The code above defines two targets:","type":"text"},{"text":" ","type":"text"},{"code":"MyProjectMacros","type":"codeVoice"},{"type":"text","text":" contains the implementation of the macros,"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"MyProject"},{"type":"text","text":" makes those macros available."}]},{"inlineContent":[{"text":"The implementation of a macro","type":"text"},{"type":"text","text":" "},{"text":"uses the ","type":"text"},{"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/apple\/swift-syntax\/"},{"text":" module to interact with Swift code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in a structured way, using an AST."},{"type":"text","text":" "},{"type":"text","text":"If you created a new macro package with Swift Package Manager,"},{"type":"text","text":" "},{"type":"text","text":"the generated "},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":" file"},{"type":"text","text":" "},{"text":"automatically includes a dependency on SwiftSyntax.","type":"text"},{"text":" ","type":"text"},{"text":"If you’re adding macros to an existing project,","type":"text"},{"type":"text","text":" "},{"text":"add a dependency on SwiftSyntax in your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":" file:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/apple\/swift-syntax\", from: \"509.0.0\")","],"]},{"type":"paragraph","inlineContent":[{"text":"Depending on your macro’s role,","type":"text"},{"type":"text","text":" "},{"text":"there’s a corresponding protocol from SwiftSyntax","type":"text"},{"type":"text","text":" "},{"text":"that the macro implementation conforms to.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"consider "},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" from the previous section.","type":"text"},{"type":"text","text":" "},{"text":"Here’s a structure that implements that macro:","type":"text"}]},{"code":["import SwiftSyntax","import SwiftSyntaxMacros","","public struct FourCharacterCode: ExpressionMacro {","    public static func expansion(","        of node: some FreestandingMacroExpansionSyntax,","        in context: some MacroExpansionContext","    ) throws -> ExprSyntax {","        guard let argument = node.argumentList.first?.expression,","              let segments = argument.as(StringLiteralExprSyntax.self)?.segments,","              segments.count == 1,","              case .stringSegment(let literalSegment)? = segments.first","        else {","            throw CustomError.message(\"Need a static string\")","        }","","        let string = literalSegment.content.text","        guard let result = fourCharacterCode(for: string) else {","            throw CustomError.message(\"Invalid four-character code\")","        }","","        return \"\\(raw: result) as UInt32\"","    }","}","","private func fourCharacterCode(for characters: String) -> UInt32? {","    guard characters.count == 4 else { return nil }","","    var result: UInt32 = 0","    for character in characters {","        result = result << 8","        guard let asciiValue = character.asciiValue else { return nil }","        result += UInt32(asciiValue)","    }","    return result","}","enum CustomError: Error { case message(String) }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re adding this macro to an existing Swift Package Manager project,"},{"text":" ","type":"text"},{"type":"text","text":"add a type that acts as the entry point for the macro target"},{"text":" ","type":"text"},{"type":"text","text":"and lists the macros that the target defines:"}]},{"syntax":"swift","code":["import SwiftCompilerPlugin","","@main","struct MyProjectMacros: CompilerPlugin {","    var providingMacros: [Macro.Type] = [FourCharacterCode.self]","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"#fourCharacterCode","type":"codeVoice"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"text":"is a freestanding macro that produces an expression,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so the "},{"type":"codeVoice","code":"FourCharacterCode"},{"text":" type that implements it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"conforms to the "},{"type":"codeVoice","code":"ExpressionMacro"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"ExpressionMacro"},{"text":" protocol has one requirement,","type":"text"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"code":"expansion(of:in:)","type":"codeVoice"},{"type":"text","text":" method that expands the AST."},{"type":"text","text":" "},{"type":"text","text":"For the list of macro roles and their corresponding SwiftSyntax protocols,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding"},{"type":"text","text":" "},{"type":"text","text":"in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To expand the "},{"type":"codeVoice","code":"#fourCharacterCode"},{"type":"text","text":" macro,"},{"text":" ","type":"text"},{"text":"Swift sends the AST for the code that uses this macro","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the library that contains the macro implementation."},{"type":"text","text":" "},{"type":"text","text":"Inside the library, Swift calls "},{"code":"FourCharacterCode.expansion(of:in:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"passing in the AST and the context as arguments to the method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The implementation of "},{"code":"expansion(of:in:)","type":"codeVoice"},{"type":"text","text":" "},{"text":"finds the string that was passed as an argument to ","type":"text"},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and calculates the corresponding 32-bit unsigned integer literal value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first "},{"code":"guard","type":"codeVoice"},{"text":" block extracts the string literal from the AST,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"assigning that AST element to "},{"type":"codeVoice","code":"literalSegment"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The second ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":" block","type":"text"},{"type":"text","text":" "},{"type":"text","text":"calls the private "},{"code":"fourCharacterCode(for:)","type":"codeVoice"},{"text":" function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both of these blocks throw an error if the macro is used incorrectly —"},{"type":"text","text":" "},{"type":"text","text":"the error message becomes a compiler error"},{"type":"text","text":" "},{"type":"text","text":"at the malformed call site."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"if you try to call the macro as ","type":"text"},{"type":"codeVoice","code":"#fourCharacterCode(\"AB\" + \"CD\")"},{"type":"text","text":" "},{"text":"the compiler shows the error “Need a static string”.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"expansion(of:in:)"},{"text":" method returns an instance of ","type":"text"},{"code":"ExprSyntax","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"a type from SwiftSyntax that represents an expression in an AST.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because this type conforms to the "},{"code":"StringLiteralConvertible","type":"codeVoice"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"the macro implementation uses a string literal","type":"text"},{"type":"text","text":" "},{"text":"as a lightweight syntax to create its result.","type":"text"},{"type":"text","text":" "},{"text":"All of the SwiftSyntax types that you return from a macro implementation","type":"text"},{"text":" ","type":"text"},{"text":"conform to ","type":"text"},{"code":"StringLiteralConvertible","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so you can use this approach when implementing any kind of macro."}]},{"text":"Developing and Debugging Macros","level":2,"anchor":"Developing-and-Debugging-Macros","type":"heading"},{"inlineContent":[{"text":"Macros are well suited to development using tests:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"They transform one AST into another AST"},{"type":"text","text":" "},{"text":"without depending on any external state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and without making changes to any external state."},{"type":"text","text":" "},{"text":"In addition, you can create syntax nodes from a string literal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which simplifies setting up the input for a test."},{"type":"text","text":" "},{"text":"You can also read the ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property of an AST","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to get a string to compare against an expected value."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"here’s a test of the ","type":"text"},{"type":"codeVoice","code":"#fourCharacterCode"},{"text":" macro from previous sections:","type":"text"}],"type":"paragraph"},{"code":["let source: SourceFileSyntax =","    \"\"\"","    let abcd = #fourCharacterCode(\"ABCD\")","    \"\"\"","","let file = BasicMacroExpansionContext.KnownSourceFile(","    moduleName: \"MyModule\",","    fullFilePath: \"test.swift\"",")","","let context = BasicMacroExpansionContext(sourceFiles: [source: file])","","let transformedSF = source.expand(","    macros:[\"fourCharacterCode\": FourCharacterCode.self],","    in: context",")","","let expectedDescription =","    \"\"\"","    let abcd = 1145258561 as UInt32","    \"\"\"","","precondition(transformedSF.description == expectedDescription)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The example above tests the macro using a precondition,","type":"text"},{"type":"text","text":" "},{"text":"but you could use a testing framework instead.","type":"text"}]},{"type":"aside","name":"Beta Software","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more about using "},{"identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","type":"reference","isActive":true},{"type":"text","text":"."}]}],"style":"note"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},"references":{"macro-ast-original":{"alt":"A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is a macro call.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD.","type":"image","variants":[{"url":"\/images\/org.swift.tspl\/macro-ast-original@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/macro-ast-original~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-ast-original"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#freestanding":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/attributes#freestanding","title":"freestanding","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding"},"https://developer.apple.com/support/beta-software/":{"url":"https:\/\/developer.apple.com\/support\/beta-software\/","title":"Apple’s beta software","titleInlineContent":[{"type":"text","text":"Apple’s beta software"}],"type":"link","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#attached":{"url":"\/documentation\/the-swift-programming-language\/attributes#attached","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","kind":"section","type":"topic","abstract":[],"title":"attached"},"macro-ast-input":{"alt":"A tree diagram, with a macro call as the root element.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD.","type":"image","variants":[{"url":"\/images\/org.swift.tspl\/macro-ast-input@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/macro-ast-input~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-ast-input"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros#Implementing-a-Macro":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/macros#Implementing-a-Macro","title":"Implementing a Macro","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementing-a-Macro"},"https://developer.apple.com/documentation/swift/externalmacro(module:type:)":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)","title":"externalMacro(module:type:)","titleInlineContent":[{"code":"externalMacro(module:type:)","type":"codeVoice"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)"},"macro-expansion-full":{"alt":"Diagram showing the four steps of expanding macros.  The input is Swift source code.  This becomes a tree, representing the code’s structure.  The macro implementation adds branches to the tree.  The result is Swift source with additional code.","type":"image","variants":[{"url":"\/images\/org.swift.tspl\/macro-expansion-full@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/macro-expansion-full~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-expansion-full"},"macro-ast-result":{"alt":"A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is the integer literal 1145258561 of type UInt32.","type":"image","variants":[{"url":"\/images\/org.swift.tspl\/macro-ast-result@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/macro-ast-result~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-ast-result"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (6.0 beta)","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article"},"macro-expansion":{"alt":"A diagram showing an overview of macro expansion.  On the left, a stylized representation of Swift code.  On the right, the same code with several lines added by the macro.","type":"image","variants":[{"url":"\/images\/org.swift.tspl\/macro-expansion@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/macro-expansion~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-expansion"},"https://developer.apple.com/documentation/swift/optionset":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/optionset","title":"OptionSet","titleInlineContent":[{"code":"OptionSet","type":"codeVoice"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset"},"macro-ast-output":{"identifier":"macro-ast-output","variants":[{"url":"\/images\/org.swift.tspl\/macro-ast-output@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/macro-ast-output~dark@2x.png","traits":["2x","dark"]}],"alt":"A tree diagram with the integer literal 1145258561 of type UInt32.","type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/attributes","kind":"article","abstract":[{"type":"text","text":"Add information to declarations and types."}],"title":"Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},"https://developer.apple.com/documentation/swift/warning(_:)":{"type":"link","title":"warning(_:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","titleInlineContent":[{"code":"warning(_:)","type":"codeVoice"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)"},"http://github.com/apple/swift-syntax/":{"type":"link","title":"SwiftSyntax","url":"http:\/\/github.com\/apple\/swift-syntax\/","titleInlineContent":[{"text":"SwiftSyntax","type":"text"}],"identifier":"http:\/\/github.com\/apple\/swift-syntax\/"},"https://developer.apple.com/documentation/swift/function()":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/function()","title":"function()","titleInlineContent":[{"code":"function()","type":"codeVoice"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function()"}}}