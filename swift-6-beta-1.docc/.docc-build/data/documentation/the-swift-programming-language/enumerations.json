{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"kind":"article","primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"text":"enumeration","type":"text"}],"type":"emphasis"},{"type":"text","text":" defines a common type for a group of related values"},{"text":" ","type":"text"},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you are familiar with C,","type":"text"},{"text":" ","type":"text"},{"text":"you will know that C enumerations assign related names to a set of integer values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Enumerations in Swift are much more flexible,"},{"type":"text","text":" "},{"type":"text","text":"and don’t have to provide a value for each case of the enumeration."},{"type":"text","text":" "},{"type":"text","text":"If a value (known as a "},{"inlineContent":[{"type":"text","text":"raw"}],"type":"emphasis"},{"text":" value) is provided for each enumeration case,","type":"text"},{"type":"text","text":" "},{"text":"the value can be a string, a character,","type":"text"},{"text":" ","type":"text"},{"text":"or a value of any integer or floating-point type.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Alternatively, enumeration cases can specify"},{"text":" ","type":"text"},{"text":"associated values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"type":"text","text":" type to be stored along with each different case value,"},{"type":"text","text":" "},{"text":"much as unions or variants do in other languages.","type":"text"},{"text":" ","type":"text"},{"text":"You can define a common set of related cases as part of one enumeration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"each of which has a different set of values of appropriate types associated with it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Enumerations in Swift are first-class types in their own right."},{"type":"text","text":" "},{"text":"They adopt many features traditionally supported only by classes,","type":"text"},{"text":" ","type":"text"},{"text":"such as computed properties to provide additional information about","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the enumeration’s current value,"},{"text":" ","type":"text"},{"text":"and instance methods to provide functionality related to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the values the enumeration represents."},{"text":" ","type":"text"},{"type":"text","text":"Enumerations can also define initializers to provide an initial case value;"},{"text":" ","type":"text"},{"type":"text","text":"can be extended to expand their functionality beyond their original implementation;"},{"text":" ","type":"text"},{"text":"and can conform to protocols to provide standard functionality.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about these capabilities, see"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","type":"reference","isActive":true},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true},{"text":", and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference"},{"text":".","type":"text"}]},{"text":"Enumeration Syntax","type":"heading","level":2,"anchor":"Enumeration-Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You introduce enumerations with the "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"text":"and place their entire definition within a pair of braces:","type":"text"}]},{"code":["enum SomeEnumeration {","    \/\/ enumeration definition goes here","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Here’s an example for the four main points of a compass:"}],"type":"paragraph"},{"code":["enum CompassPoint {","    case north","    case south","    case east","    case west","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values defined in an enumeration"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"north"},{"type":"text","text":", "},{"type":"codeVoice","code":"south"},{"text":", ","type":"text"},{"code":"east","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"west"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration cases"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"You use the ","type":"text"},{"code":"case","type":"codeVoice"},{"text":" keyword to introduce new enumeration cases.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift enumeration cases don’t have an integer value set by default,"},{"type":"text","text":" "},{"type":"text","text":"unlike languages like C and Objective-C."},{"type":"text","text":" "},{"type":"text","text":"In the "},{"code":"CompassPoint","type":"codeVoice"},{"type":"text","text":" example above,"},{"type":"text","text":" "},{"code":"north","type":"codeVoice"},{"text":", ","type":"text"},{"code":"south","type":"codeVoice"},{"type":"text","text":", "},{"code":"east","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"west"},{"type":"text","text":" "},{"type":"text","text":"don’t implicitly equal"},{"type":"text","text":" "},{"code":"0","type":"codeVoice"},{"text":", ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"2"},{"text":" and ","type":"text"},{"code":"3","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Instead, the different enumeration cases are values in their own right,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with an explicitly defined type of "},{"code":"CompassPoint","type":"codeVoice"},{"type":"text","text":"."}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"type":"text","text":"Multiple cases can appear on a single line, separated by commas:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum Planet {","    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each enumeration definition defines a new type."},{"text":" ","type":"text"},{"text":"Like other types in Swift, their names","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"code":"CompassPoint","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Planet","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"start with a capital letter.","type":"text"},{"text":" ","type":"text"},{"text":"Give enumeration types singular rather than plural names,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so that they read as self-evident:"}]},{"type":"codeListing","code":["var directionToHead = CompassPoint.west"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"code":"directionToHead","type":"codeVoice"},{"text":" is inferred","type":"text"},{"text":" ","type":"text"},{"text":"when it’s initialized with one of the possible values of ","type":"text"},{"code":"CompassPoint","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Once "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is declared as a "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you can set it to a different "},{"code":"CompassPoint","type":"codeVoice"},{"text":" value using a shorter dot syntax:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["directionToHead = .east"]},{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"type":"codeVoice","code":"directionToHead"},{"text":" is already known,","type":"text"},{"type":"text","text":" "},{"text":"and so you can drop the type when setting its value.","type":"text"},{"text":" ","type":"text"},{"text":"This makes for highly readable code when working with explicitly typed enumeration values.","type":"text"}]},{"level":2,"type":"heading","anchor":"Matching-Enumeration-Values-with-a-Switch-Statement","text":"Matching Enumeration Values with a Switch Statement"},{"inlineContent":[{"text":"You can match individual enumeration values with a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["directionToHead = .south","switch directionToHead {","case .north:","    print(\"Lots of planets have a north\")","case .south:","    print(\"Watch out for penguins\")","case .east:","    print(\"Where the sun rises\")","case .west:","    print(\"Where the skies are blue\")","}","\/\/ Prints \"Watch out for penguins\""]},{"inlineContent":[{"type":"text","text":"You can read this code as:"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"“Consider the value of "},{"code":"directionToHead","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"In the case where it equals ","type":"text"},{"code":".north","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"print "},{"type":"codeVoice","code":"\"Lots of planets have a north\""},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In the case where it equals "},{"type":"codeVoice","code":".south"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"print "},{"type":"codeVoice","code":"\"Watch out for penguins\""},{"type":"text","text":".”"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"…and so on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"code":"switch","type":"codeVoice"},{"text":" statement must be exhaustive when considering an enumeration’s cases.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the "},{"code":"case","type":"codeVoice"},{"text":" for ","type":"text"},{"type":"codeVoice","code":".west"},{"type":"text","text":" is omitted,"},{"text":" ","type":"text"},{"text":"this code doesn’t compile,","type":"text"},{"type":"text","text":" "},{"text":"because it doesn’t consider the complete list of ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" cases."},{"type":"text","text":" "},{"type":"text","text":"Requiring exhaustiveness ensures that enumeration cases aren’t accidentally omitted."}]},{"inlineContent":[{"type":"text","text":"When it isn’t appropriate to provide a "},{"type":"codeVoice","code":"case"},{"type":"text","text":" for every enumeration case,"},{"text":" ","type":"text"},{"type":"text","text":"you can provide a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" case to cover any cases that aren’t addressed explicitly:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let somePlanet = Planet.earth","switch somePlanet {","case .earth:","    print(\"Mostly harmless\")","default:","    print(\"Not a safe place for humans\")","}","\/\/ Prints \"Mostly harmless\""]},{"anchor":"Iterating-over-Enumeration-Cases","level":2,"type":"heading","text":"Iterating over Enumeration Cases"},{"type":"paragraph","inlineContent":[{"text":"For some enumerations,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to have a collection of all of that enumeration’s cases."},{"type":"text","text":" "},{"type":"text","text":"You enable this by"},{"text":" ","type":"text"},{"type":"text","text":"writing "},{"code":": CaseIterable","type":"codeVoice"},{"type":"text","text":" after the enumeration’s name."},{"text":" ","type":"text"},{"type":"text","text":"Swift exposes a collection of all the cases"},{"text":" ","type":"text"},{"text":"as an ","type":"text"},{"type":"codeVoice","code":"allCases"},{"text":" property of the enumeration type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s an example:"}]},{"type":"codeListing","syntax":"swift","code":["enum Beverage: CaseIterable {","    case coffee, tea, juice","}","let numberOfChoices = Beverage.allCases.count","print(\"\\(numberOfChoices) beverages available\")","\/\/ Prints \"3 beverages available\""]},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"text":"you write ","type":"text"},{"code":"Beverage.allCases","type":"codeVoice"},{"type":"text","text":" to access a collection"},{"text":" ","type":"text"},{"text":"that contains all of the cases of the ","type":"text"},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" enumeration."},{"type":"text","text":" "},{"type":"text","text":"You can use "},{"code":"allCases","type":"codeVoice"},{"text":" like any other collection —","type":"text"},{"type":"text","text":" "},{"text":"the collection’s elements are instances of the enumeration type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so in this case they’re "},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" values."},{"text":" ","type":"text"},{"text":"The example above counts how many cases there are,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the example below uses a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate over all the cases."}]},{"type":"codeListing","syntax":"swift","code":["for beverage in Beverage.allCases {","    print(beverage)","}","\/\/ coffee","\/\/ tea","\/\/ juice"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax used in the examples above"},{"type":"text","text":" "},{"type":"text","text":"marks the enumeration as conforming to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"For information about protocols, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"text":"Associated Values","anchor":"Associated-Values","level":2,"type":"heading"},{"inlineContent":[{"text":"The examples in the previous section show how the cases of an enumeration are","type":"text"},{"type":"text","text":" "},{"text":"a defined (and typed) value in their own right.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can set a constant or variable to "},{"code":"Planet.earth","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and check for this value later."},{"text":" ","type":"text"},{"type":"text","text":"However, it’s sometimes useful to be able to store"},{"text":" ","type":"text"},{"type":"text","text":"values of other types alongside these case values."},{"type":"text","text":" "},{"type":"text","text":"This additional information is called an "},{"type":"emphasis","inlineContent":[{"text":"associated value","type":"text"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and it varies each time you use that case as a value in your code.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can define Swift enumerations to store associated values of any given type,","type":"text"},{"text":" ","type":"text"},{"text":"and the value types can be different for each case of the enumeration if needed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Enumerations similar to these are known as"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"discriminated unions"}],"type":"emphasis"},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tagged unions"}]},{"type":"text","text":", or "},{"inlineContent":[{"type":"text","text":"variants"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in other programming languages."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, suppose an inventory tracking system needs to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"track products by two different types of barcode."},{"text":" ","type":"text"},{"type":"text","text":"Some products are labeled with 1D barcodes in UPC format,"},{"text":" ","type":"text"},{"type":"text","text":"which uses the numbers "},{"type":"codeVoice","code":"0"},{"type":"text","text":" to "},{"type":"codeVoice","code":"9"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Each barcode has a number system digit,","type":"text"},{"text":" ","type":"text"},{"text":"followed by five manufacturer code digits and five product code digits.","type":"text"},{"text":" ","type":"text"},{"text":"These are followed by a check digit to verify that the code has been scanned correctly:","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"barcode_UPC"}],"type":"paragraph"},{"inlineContent":[{"text":"Other products are labeled with 2D barcodes in QR code format,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which can use any ISO 8859-1 character"},{"type":"text","text":" "},{"type":"text","text":"and can encode a string up to 2,953 characters long:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"barcode_QR"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s convenient for an inventory tracking system to store UPC barcodes"},{"text":" ","type":"text"},{"type":"text","text":"as a tuple of four integers,"},{"type":"text","text":" "},{"text":"and QR code barcodes as a string of any length.","type":"text"}]},{"inlineContent":[{"text":"In Swift, an enumeration to define product barcodes of either type might look like this:","type":"text"}],"type":"paragraph"},{"code":["enum Barcode {","    case upc(Int, Int, Int, Int)","    case qrCode(String)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This can be read as:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"“Define an enumeration type called ","type":"text"},{"code":"Barcode","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which can take either a value of ","type":"text"},{"type":"codeVoice","code":"upc"},{"type":"text","text":" "},{"type":"text","text":"with an associated value of type ("},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"code":"Int","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or a value of "},{"code":"qrCode","type":"codeVoice"},{"type":"text","text":" with an associated value of type "},{"code":"String","type":"codeVoice"},{"text":".”","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This definition doesn’t provide any actual "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"text":" values —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it just defines the "},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" of associated values"},{"type":"text","text":" "},{"type":"text","text":"that "},{"code":"Barcode","type":"codeVoice"},{"type":"text","text":" constants and variables can store"},{"text":" ","type":"text"},{"text":"when they’re equal to ","type":"text"},{"code":"Barcode.upc","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can then create new barcodes using either type:","type":"text"}]},{"code":["var productBarcode = Barcode.upc(8, 85909, 51226, 3)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This example creates a new variable called ","type":"text"},{"code":"productBarcode","type":"codeVoice"},{"type":"text","text":" "},{"text":"and assigns it a value of ","type":"text"},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" "},{"text":"with an associated tuple value of ","type":"text"},{"code":"(8, 85909, 51226, 3)","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can assign the same product a different type of barcode:"}]},{"syntax":"swift","type":"codeListing","code":["productBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")"]},{"inlineContent":[{"text":"At this point,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the original "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" and its integer values are replaced by"},{"text":" ","type":"text"},{"text":"the new ","type":"text"},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":" and its string value."},{"text":" ","type":"text"},{"type":"text","text":"Constants and variables of type "},{"code":"Barcode","type":"codeVoice"},{"type":"text","text":" can store either a "},{"type":"codeVoice","code":".upc"},{"text":" or a ","type":"text"},{"type":"codeVoice","code":".qrCode"},{"text":" ","type":"text"},{"type":"text","text":"(together with their associated values),"},{"type":"text","text":" "},{"type":"text","text":"but they can store only one of them at any given time."}],"type":"paragraph"},{"inlineContent":[{"text":"You can check the different barcode types using a switch statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"similar to the example in"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This time, however,"},{"type":"text","text":" "},{"text":"the associated values are extracted as part of the switch statement.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You extract each associated value as a constant (with the "},{"code":"let","type":"codeVoice"},{"text":" prefix)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or a variable (with the "},{"code":"var","type":"codeVoice"},{"type":"text","text":" prefix)"},{"text":" ","type":"text"},{"type":"text","text":"for use within the "},{"type":"codeVoice","code":"switch"},{"text":" case’s body:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["switch productBarcode {","case .upc(let numberSystem, let manufacturer, let product, let check):","    print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case .qrCode(let productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If all of the associated values for an enumeration case","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are extracted as constants, or if all are extracted as variables,"},{"type":"text","text":" "},{"type":"text","text":"you can place a single "},{"code":"let","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"var"},{"type":"text","text":" annotation before the case name, for brevity:"}]},{"code":["switch productBarcode {","case let .upc(numberSystem, manufacturer, product, check):","    print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case let .qrCode(productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","anchor":"Raw-Values","text":"Raw Values"},{"type":"paragraph","inlineContent":[{"text":"The barcode example in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"shows how cases of an enumeration can declare that they store"},{"type":"text","text":" "},{"text":"associated values of different types.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As an alternative to associated values,"},{"text":" ","type":"text"},{"text":"enumeration cases can come prepopulated with default values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(called "},{"type":"emphasis","inlineContent":[{"text":"raw values","type":"text"}]},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which are all of the same type."}]},{"inlineContent":[{"type":"text","text":"Here’s an example that stores raw ASCII values alongside named enumeration cases:"}],"type":"paragraph"},{"syntax":"swift","code":["enum ASCIIControlCharacter: Character {","    case tab = \"\\t\"","    case lineFeed = \"\\n\"","    case carriageReturn = \"\\r\"","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, the raw values for an enumeration called "},{"type":"codeVoice","code":"ASCIIControlCharacter"},{"text":" ","type":"text"},{"type":"text","text":"are defined to be of type "},{"code":"Character","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and are set to some of the more common ASCII control characters."},{"text":" ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values are described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Raw values can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strings, characters, or any of the integer or floating-point number types."},{"text":" ","type":"text"},{"text":"Each raw value must be unique within its enumeration declaration.","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Raw values are ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" the same as associated values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Raw values are set to prepopulated values"},{"text":" ","type":"text"},{"text":"when you first define the enumeration in your code,","type":"text"},{"type":"text","text":" "},{"text":"like the three ASCII codes above.","type":"text"},{"type":"text","text":" "},{"text":"The raw value for a particular enumeration case is always the same.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Associated values are set when you create a new constant or variable"},{"type":"text","text":" "},{"text":"based on one of the enumeration’s cases,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can be different each time you do so."}]}],"name":"Note"},{"type":"heading","text":"Implicitly Assigned Raw Values","level":3,"anchor":"Implicitly-Assigned-Raw-Values"},{"inlineContent":[{"type":"text","text":"When you’re working with enumerations that store integer or string raw values,"},{"text":" ","type":"text"},{"text":"you don’t have to explicitly assign a raw value for each case.","type":"text"},{"text":" ","type":"text"},{"text":"When you don’t, Swift automatically assigns the values for you.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, when integers are used for raw values,"},{"type":"text","text":" "},{"type":"text","text":"the implicit value for each case is one more than the previous case."},{"text":" ","type":"text"},{"text":"If the first case doesn’t have a value set, its value is ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The enumeration below is a refinement of the earlier ","type":"text"},{"type":"codeVoice","code":"Planet"},{"text":" enumeration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with integer raw values to represent each planet’s order from the sun:"}]},{"syntax":"swift","type":"codeListing","code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","}"]},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"code":"Planet.mercury","type":"codeVoice"},{"text":" has an explicit raw value of ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"Planet.venus"},{"type":"text","text":" has an implicit raw value of "},{"code":"2","type":"codeVoice"},{"type":"text","text":", and so on."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When strings are used for raw values,"},{"type":"text","text":" "},{"text":"the implicit value for each case is the text of that case’s name.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" enumeration,"},{"text":" ","type":"text"},{"text":"with string raw values to represent each direction’s name:","type":"text"}]},{"syntax":"swift","code":["enum CompassPoint: String {","    case north, south, east, west","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CompassPoint.south"},{"text":" has an implicit raw value of ","type":"text"},{"type":"codeVoice","code":"\"south\""},{"type":"text","text":", and so on."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access the raw value of an enumeration case with its "},{"type":"codeVoice","code":"rawValue"},{"text":" property:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let earthsOrder = Planet.earth.rawValue","\/\/ earthsOrder is 3","","let sunsetDirection = CompassPoint.west.rawValue","\/\/ sunsetDirection is \"west\""]},{"anchor":"Initializing-from-a-Raw-Value","level":3,"type":"heading","text":"Initializing from a Raw Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define an enumeration with a raw-value type,"},{"type":"text","text":" "},{"type":"text","text":"the enumeration automatically receives an initializer"},{"type":"text","text":" "},{"text":"that takes a value of the raw value’s type (as a parameter called ","type":"text"},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and returns either an enumeration case or ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"You can use this initializer to try to create a new instance of the enumeration."}]},{"inlineContent":[{"text":"This example identifies Uranus from its raw value of ","type":"text"},{"code":"7","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let possiblePlanet = Planet(rawValue: 7)","\/\/ possiblePlanet is of type Planet? and equals Planet.uranus"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Not all possible ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" values will find a matching planet, however.","type":"text"},{"text":" ","type":"text"},{"text":"Because of this, the raw value initializer always returns an ","type":"text"},{"inlineContent":[{"text":"optional","type":"text"}],"type":"emphasis"},{"type":"text","text":" enumeration case."},{"text":" ","type":"text"},{"type":"text","text":"In the example above, "},{"code":"possiblePlanet","type":"codeVoice"},{"text":" is of type ","type":"text"},{"code":"Planet?","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"code":"Planet","type":"codeVoice"},{"text":".”","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The raw value initializer is a failable initializer,"},{"type":"text","text":" "},{"text":"because not every raw value will return an enumeration case.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers"},{"type":"text","text":"."}]}]},{"inlineContent":[{"type":"text","text":"If you try to find a planet with a position of "},{"code":"11","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the optional "},{"type":"codeVoice","code":"Planet"},{"text":" value returned by the raw value initializer will be ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let positionToFind = 11","if let somePlanet = Planet(rawValue: positionToFind) {","    switch somePlanet {","    case .earth:","        print(\"Mostly harmless\")","    default:","        print(\"Not a safe place for humans\")","    }","} else {","    print(\"There isn't a planet at position \\(positionToFind)\")","}","\/\/ Prints \"There isn't a planet at position 11\""]},{"type":"paragraph","inlineContent":[{"text":"This example uses optional binding to try to access a planet with a raw value of ","type":"text"},{"type":"codeVoice","code":"11"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The statement "},{"type":"codeVoice","code":"if let somePlanet = Planet(rawValue: 11)"},{"type":"text","text":" creates an optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and sets "},{"type":"codeVoice","code":"somePlanet"},{"type":"text","text":" to the value of that optional "},{"code":"Planet","type":"codeVoice"},{"type":"text","text":" if it can be retrieved."},{"text":" ","type":"text"},{"type":"text","text":"In this case, it isn’t possible to retrieve a planet with a position of "},{"type":"codeVoice","code":"11"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"else"},{"text":" branch is executed instead.","type":"text"}]},{"text":"Recursive Enumerations","level":2,"type":"heading","anchor":"Recursive-Enumerations"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"recursive enumeration"}]},{"type":"text","text":" is an enumeration"},{"type":"text","text":" "},{"text":"that has another instance of the enumeration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the associated value for one or more of the enumeration cases."},{"text":" ","type":"text"},{"type":"text","text":"You indicate that an enumeration case is recursive"},{"text":" ","type":"text"},{"text":"by writing ","type":"text"},{"code":"indirect","type":"codeVoice"},{"text":" before it,","type":"text"},{"text":" ","type":"text"},{"text":"which tells the compiler to insert the necessary layer of indirection.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, here is an enumeration that stores simple arithmetic expressions:"}]},{"code":["enum ArithmeticExpression {","    case number(Int)","    indirect case addition(ArithmeticExpression, ArithmeticExpression)","    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can also write "},{"code":"indirect","type":"codeVoice"},{"type":"text","text":" before the beginning of the enumeration"},{"type":"text","text":" "},{"text":"to enable indirection for all of the enumeration’s cases that have an associated value:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["indirect enum ArithmeticExpression {","    case number(Int)","    case addition(ArithmeticExpression, ArithmeticExpression)","    case multiplication(ArithmeticExpression, ArithmeticExpression)","}"]},{"inlineContent":[{"type":"text","text":"This enumeration can store three kinds of arithmetic expressions:"},{"text":" ","type":"text"},{"text":"a plain number,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the addition of two expressions,"},{"text":" ","type":"text"},{"text":"and the multiplication of two expressions.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"addition"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"multiplication"},{"text":" cases have associated values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that are also arithmetic expressions —"},{"type":"text","text":" "},{"type":"text","text":"these associated values make it possible to nest expressions."},{"type":"text","text":" "},{"type":"text","text":"For example, the expression "},{"type":"codeVoice","code":"(5 + 4) * 2"},{"type":"text","text":" "},{"text":"has a number on the right-hand side of the multiplication","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and another expression on the left-hand side of the multiplication."},{"type":"text","text":" "},{"text":"Because the data is nested,","type":"text"},{"text":" ","type":"text"},{"text":"the enumeration used to store the data also needs to support nesting —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this means the enumeration needs to be recursive."},{"type":"text","text":" "},{"type":"text","text":"The code below shows the "},{"type":"codeVoice","code":"ArithmeticExpression"},{"type":"text","text":" recursive enumeration"},{"text":" ","type":"text"},{"text":"being created for ","type":"text"},{"code":"(5 + 4) * 2","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let five = ArithmeticExpression.number(5)","let four = ArithmeticExpression.number(4)","let sum = ArithmeticExpression.addition(five, four)","let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A recursive function is a straightforward way","type":"text"},{"type":"text","text":" "},{"text":"to work with data that has a recursive structure.","type":"text"},{"type":"text","text":" "},{"text":"For example, here’s a function that evaluates an arithmetic expression:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func evaluate(_ expression: ArithmeticExpression) -> Int {","    switch expression {","    case let .number(value):","        return value","    case let .addition(left, right):","        return evaluate(left) + evaluate(right)","    case let .multiplication(left, right):","        return evaluate(left) * evaluate(right)","    }","}","","print(evaluate(product))","\/\/ Prints \"18\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This function evaluates a plain number"},{"type":"text","text":" "},{"text":"by simply returning the associated value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It evaluates an addition or multiplication"},{"text":" ","type":"text"},{"type":"text","text":"by evaluating the expression on the left-hand side,"},{"text":" ","type":"text"},{"type":"text","text":"evaluating the expression on the right-hand side,"},{"type":"text","text":" "},{"type":"text","text":"and then adding them or multiplying them."}],"type":"paragraph"},{"style":"note","name":"Beta Software","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Learn more about using "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"metadata":{"title":"Enumerations"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Model custom types that define a list of possible values.","type":"text"}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"title":"Strings and Characters","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","abstract":[{"type":"text","text":"Store and manipulate text."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Associated-Values":{"abstract":[],"kind":"section","title":"Associated Values","url":"\/documentation\/the-swift-programming-language\/enumerations#Associated-Values","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values"},"barcode_UPC":{"variants":[{"url":"\/images\/org.swift.tspl\/barcode_UPC@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/barcode_UPC~dark@2x.png","traits":["2x","dark"]}],"identifier":"barcode_UPC","type":"image","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (6.0 beta)","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","abstract":[{"text":"Define and call functions that are part of an instance or type.","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement":{"abstract":[],"title":"Matching Enumeration Values with a Switch Statement","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations#Matching-Enumeration-Values-with-a-Switch-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Failable-Initializers":{"url":"\/documentation\/the-swift-programming-language\/declarations#Failable-Initializers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers","kind":"section","type":"topic","abstract":[],"title":"Failable Initializers"},"barcode_QR":{"variants":[{"url":"\/images\/org.swift.tspl\/barcode_QR@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/barcode_QR~dark@2x.png","traits":["2x","dark"]}],"identifier":"barcode_QR","type":"image","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","title":"Control Flow","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/extensions","kind":"article","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","abstract":[{"text":"Access stored and computed values that are part of an instance or type.","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/properties"},"https://developer.apple.com/documentation/swift/caseiterable":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","title":"CaseIterable","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","type":"link","titleInlineContent":[{"type":"codeVoice","code":"CaseIterable"}]},"https://developer.apple.com/support/beta-software/":{"url":"https:\/\/developer.apple.com\/support\/beta-software\/","title":"Apple’s beta software","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","type":"link","titleInlineContent":[{"type":"text","text":"Apple’s beta software"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"url":"\/documentation\/the-swift-programming-language\/protocols","type":"topic","kind":"article","role":"article","title":"Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","url":"\/documentation\/the-swift-programming-language\/initialization","type":"topic","title":"Initialization","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"}}}